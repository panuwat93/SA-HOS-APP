import React, { useState, useEffect } from 'react';
import { Routes, Route, useNavigate, useLocation } from 'react-router-dom';
import { getDocs, collection } from 'firebase/firestore';
import { db } from '../firebase';
import ScheduleManagement from './ScheduleManagement';
import TaskAssignment from './TaskAssignment';
import PreExchangeSchedule from './PreExchangeSchedule';
import OnCallSchedule from './OnCallSchedule';
import StaffCalendar from './StaffCalendar';
import ChangePasswordModal from './ChangePasswordModal';
import './StaffDashboard.css';

function StaffDashboard() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showChangePassword, setShowChangePassword] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage
    const currentUser = localStorage.getItem('currentUser');
    if (currentUser) {
      try {
        const userData = JSON.parse(currentUser);
        if (userData.role === 'staff') {
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å staff collection ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
          const staffQuery = getDocs(collection(db, 'staff'));
          let staffData = null;
          
          staffQuery.then((querySnapshot) => {
            querySnapshot.forEach((doc) => {
              const data = doc.data();
              if (data.firstName === userData.firstName && data.lastName === userData.lastName) {
                staffData = { id: doc.id, ...data };
              }
            });
            
            if (staffData) {
              // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å users ‡πÅ‡∏•‡∏∞ staff collections
              const userWithPermissions = { 
                ...userData, 
                ...staffData,
                // ‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å staff collection
                canEditSchedule: staffData.canEditSchedule || false,
                canAssignTasks: staffData.canAssignTasks || false
              };
              
              setUser(userWithPermissions);
            } else {
              // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô staff collection ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
              const userWithDefaultPermissions = { 
                ...userData,
                canEditSchedule: false,
                canAssignTasks: false
              };
              
              setUser(userWithDefaultPermissions);
            }
            setLoading(false);
          }).catch((error) => {
            console.error('Error fetching staff data:', error);
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
            const userWithDefaultPermissions = { 
              ...userData,
              canEditSchedule: false,
              canAssignTasks: false
            };
            
            setUser(userWithDefaultPermissions);
            setLoading(false);
          });
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ admin
          navigate('/admin');
          return;
        }
      } catch (error) {
        console.error('Error parsing user data:', error);
        localStorage.removeItem('currentUser');
        navigate('/');
        return;
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
      navigate('/');
      return;
    }
  }, [navigate]);

  const handleLogout = async () => {
    try {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage
      localStorage.removeItem('currentUser');
      navigate('/');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  if (loading) {
    return (
      <div className="staff-dashboard">
        <div className="loading-spinner">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      </div>
    );
  }

  return (
    <div className="staff-dashboard">
      {/* Header */}
      <div className="staff-header">
        <div className="header-content">
          <div className="hospital-logo">
            <div className="logo-icon">üè•</div>
            <div className="logo-text">
              <h1 className="hospital-name">SA HOS APP</h1>
              <p className="hospital-subtitle">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô - ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</p>
            </div>
          </div>
          <div className="user-info">
            <div className="user-details">
              <div className="user-text">
                <span className="user-name">{user?.firstName} {user?.lastName}</span>
                <span className="user-position">{user?.position}</span>
                <span className="user-department">{user?.department}</span>
                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á */}
                <div className="user-permissions">
                  <span className="permission-label">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå:</span>
                  
                                    {/* Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå */}
                  {user?.canEditSchedule && (
                    <span className="permission-badge schedule" title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£">üìÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£</span>
                  )}
                  {user?.canAssignTasks && (
                    <span className="permission-badge tasks" title="‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô">üìã ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</span>
                  )}
                  {!user?.canEditSchedule && !user?.canAssignTasks && (
                    <span className="permission-badge readonly" title="‡∏î‡∏π‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß">üëÅÔ∏è ‡∏î‡∏π‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Menu */}
      <div className="nav-menu">
        {/* ‡πÅ‡∏Æ‡∏°‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */}
        <div className="mobile-menu-toggle" onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}>
          <span className={`hamburger ${isMobileMenuOpen ? 'active' : ''}`}></span>
        </div>

        {/* ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å */}
        <ul className={`nav-list ${isMobileMenuOpen ? 'mobile-open' : ''}`}>
          <li className="nav-item">
            <button 
              onClick={() => {
                navigate('/staff');
                setIsMobileMenuOpen(false);
              }}
              className={`nav-button ${location.pathname === '/staff' ? 'active' : ''}`}
            >
              üìÖ ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£
            </button>
          </li>
          <li className="nav-item">
            <button
              onClick={() => {
                navigate('/staff/tasks');
                setIsMobileMenuOpen(false);
              }}
              className={`nav-button ${location.pathname === '/staff/tasks' ? 'active' : ''}`}
            >
              üìã ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
            </button>
          </li>
          <li className="nav-item">
            <button
              onClick={() => {
                navigate('/staff/pre-exchange-schedule');
                setIsMobileMenuOpen(false);
              }}
              className={`nav-button ${location.pathname === '/staff/pre-exchange-schedule' ? 'active' : ''}`}
            >
              üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏Å
            </button>
          </li>
          <li className="nav-item">
            <button
              onClick={() => {
                navigate('/staff/oncall');
                setIsMobileMenuOpen(false);
              }}
              className={`nav-button ${location.pathname === '/staff/oncall' ? 'active' : ''}`}
            >
              üìû ‡∏ï‡∏≤‡∏£‡∏≤‡∏á On Call
            </button>
          </li>
          <li className="nav-item">
            <button
              onClick={() => {
                navigate('/staff/calendar');
                setIsMobileMenuOpen(false);
              }}
              className={`nav-button ${location.pathname === '/staff/calendar' ? 'active' : ''}`}
            >
              üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
            </button>
          </li>
          <li className="nav-item">
            <button 
              onClick={() => {
                setShowChangePassword(true);
                setIsMobileMenuOpen(false);
              }}
              className="nav-button"
            >
              üîê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
            </button>
          </li>
          <li className="nav-item">
            <button onClick={() => {
              handleLogout();
              setIsMobileMenuOpen(false);
            }} className="nav-button logout">
              üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          </li>
        </ul>
      </div>

      {/* Main Content */}
      <div className="container">
        <Routes>
          <Route path="/" element={<ScheduleManagement user={user} />} />
          <Route path="/tasks" element={<TaskAssignment user={user} />} />
          <Route path="/pre-exchange-schedule" element={<PreExchangeSchedule user={user} />} />
          <Route path="/oncall" element={<OnCallSchedule user={user} />} />
          <Route path="/calendar" element={<StaffCalendar user={user} />} />
        </Routes>
      </div>

      {/* Footer */}
      <div className="staff-footer">
        <p>¬© 2024 SA HOS APP. All rights reserved.</p>
      </div>

      {/* Change Password Modal */}
      {showChangePassword && (
        <ChangePasswordModal 
          onClose={() => setShowChangePassword(false)} 
        />
      )}
    </div>
  );
}

export default StaffDashboard;