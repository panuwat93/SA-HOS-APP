import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { doc, setDoc, collection, query, where, getDocs } from 'firebase/firestore';
import { auth, db } from '../firebase';
import './Register.css';

function Register() {
  const [department, setDepartment] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [position, setPosition] = useState('');
  const [userType] = useState('staff'); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const [selectedStaff, setSelectedStaff] = useState(null); // ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [staffList, setStaffList] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å
  const [loadingStaff, setLoadingStaff] = useState(false); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const departments = [
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏Å‡∏∏‡∏°‡∏≤‡∏£‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏°',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏¢ 1',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏ç‡∏¥‡∏á',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏¢ 2',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏´‡∏ç‡∏¥‡∏á',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏ä‡∏≤‡∏¢',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏© Premium',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏© 5',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏© 4',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏Å‡∏∂‡πà‡∏á‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏¥‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡∏ï‡∏≤ ‡∏´‡∏π ‡∏Ñ‡∏≠ ‡∏à‡∏°‡∏π‡∏Å',
    '‡∏´‡πâ‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° 2',
    '‡∏´‡∏≠‡∏≠‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏¥‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à',
    '‡∏û‡∏¥‡πÄ‡∏®‡∏© VIP',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏ç‡∏¥‡∏á 1',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏ç‡∏¥‡∏á 2',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≤‡∏£‡∏µ‡πÄ‡∏ß‡∏ä',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏≠‡∏î',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏¢ 1',
    '‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏¢ 2',
    '‡∏´‡πâ‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° 1',
    '‡πÑ‡∏ï‡πÄ‡∏ó‡∏µ‡∏¢‡∏°',
    '‡∏´‡πâ‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ô‡∏±‡∏Å‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏° 1',
    '‡∏´‡πâ‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ô‡∏±‡∏Å‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏° 2',
    'NICU',
    'SNB',
    '‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏•‡∏≠‡∏î',
    'OR',
    'OR minor',
    'ER'
  ];

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å
  const fetchStaffByDepartment = async (departmentName) => {
    if (!departmentName) {
      setStaffList([]);
      setSelectedStaff(null);
      return;
    }

    setLoadingStaff(true);
    setError(''); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï error
    
    try {
      
      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
      const allStaffQuery = query(collection(db, 'staff'));
      const allStaffSnapshot = await getDocs(allStaffQuery);
      
      
      const staffData = [];
      allStaffSnapshot.forEach((doc) => {
        const data = doc.data();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ department ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (data.department && data.department === departmentName) {
          staffData.push({
            id: doc.id,
            ...data
          });
        }
      });
      
      setStaffList(staffData);
      setSelectedStaff(null); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
      
      if (staffData.length === 0) {
      }
      
    } catch (error) {
      console.error('Error fetching staff:', error);
      setError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ${error.message}`);
    } finally {
      setLoadingStaff(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å
  const handleDepartmentChange = (selectedDepartment) => {
    setDepartment(selectedDepartment);
    fetchStaffByDepartment(selectedDepartment);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
  const handleStaffSelection = (staff) => {
    setSelectedStaff(staff);
    setFirstName(staff.firstName);
    setLastName(staff.lastName);
    setPosition(staff.position);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!department) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å');
      return;
    }

    if (!selectedStaff) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠');
      return;
    }

    if (password !== confirmPassword) {
      setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
      return;
    }

    if (password.length < 6) {
      setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
      return;
    }

    setLoading(true);

    try {
      // ‡πÉ‡∏ä‡πâ username@sa-hos.com ‡πÄ‡∏õ‡πá‡∏ô email ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase
      const email = `${username}@sa-hos.com`;
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô Firestore
      await setDoc(doc(db, 'users', userCredential.user.uid), {
        username: username,
        firstName: selectedStaff.firstName,
        lastName: selectedStaff.lastName,
        department: selectedStaff.department,
        position: selectedStaff.position,
        role: 'staff', // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        password: password, // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Firestore
        createdAt: new Date().toISOString()
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏á‡πÉ‡∏ô collection 'staff' ‡∏î‡πâ‡∏ß‡∏¢
      await setDoc(doc(db, 'staff', userCredential.user.uid), {
        id: userCredential.user.uid,
        firstName: selectedStaff.firstName,
        lastName: selectedStaff.lastName,
        department: selectedStaff.department,
        position: selectedStaff.position,
        order: 999, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        createdAt: new Date().toISOString()
      });

      // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      navigate('/staff');
    } catch (error) {
      console.error('Registration error:', error);
      if (error.code === 'auth/email-already-in-use') {
        setError('Username ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Username ‡∏≠‡∏∑‡πà‡∏ô');
      } else {
        setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="register-container">
      {/* Background Animation */}
      <div className="background-animation">
        <div className="floating-shapes">
          <div className="shape shape-1"></div>
          <div className="shape shape-2"></div>
          <div className="shape shape-3"></div>
          <div className="shape shape-4"></div>
        </div>
      </div>

      {/* Header Section */}
      <div className="register-header">
        <div className="header-content">
          <div className="hospital-logo">
            <div className="logo-icon">üè•</div>
            <div className="logo-text">
                      <h1 className="hospital-name">SA HOS APP</h1>
        <p className="hospital-subtitle">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</p>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="register-content">
        <div className="register-card">
          <div className="card-header">
            <div className="welcome-icon">‚ú®</div>
            <h2 className="register-title">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
            <p className="register-subtitle">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£</p>
          </div>

          <form onSubmit={handleSubmit} className="register-form">
            {/* ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô */}
            <input type="hidden" value="staff" />

            {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å */}
            <div className="form-group">
              <div className="input-wrapper">
                <select
                  className="form-input"
                  value={department}
                  onChange={(e) => handleDepartmentChange(e.target.value)}
                  required
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å</option>
                  {departments.map((dept, index) => (
                    <option key={index} value={dept}>{dept}</option>
                  ))}
                </select>
                <div className="input-focus-border"></div>
              </div>
              

            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å */}
            {department && (
              <div className="staff-selection-section">
                <label className="staff-selection-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:</label>
                {loadingStaff ? (
                  <div className="loading-staff">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà...</div>
                ) : staffList.length > 0 ? (
                  <div className="staff-list">
                    {staffList.map((staff) => (
                      <div
                        key={staff.id}
                        className={`staff-item ${selectedStaff?.id === staff.id ? 'selected' : ''}`}
                        onClick={() => handleStaffSelection(staff)}
                      >
                        <div className="staff-info">
                          <div className="staff-name">{staff.firstName} {staff.lastName}</div>
                          <div className="staff-position">{staff.position}</div>
                        </div>
                        <div className="staff-select-icon">
                          {selectedStaff?.id === staff.id ? '‚úÖ' : 'üë§'}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="no-staff-message">
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ
                  </div>
                )}
              </div>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
            {selectedStaff && (
              <div className="selected-staff-info">
                <div className="info-header">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</div>
                <div className="info-grid">
                  <div className="info-item">
                    <span className="info-label">‡∏ä‡∏∑‡πà‡∏≠:</span>
                    <span className="info-value">{selectedStaff.firstName}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</span>
                    <span className="info-value">{selectedStaff.lastName}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</span>
                    <span className="info-value">{selectedStaff.position}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">‡πÅ‡∏ú‡∏ô‡∏Å:</span>
                    <span className="info-value">{selectedStaff.department}</span>
                  </div>
                </div>
              </div>
            )}

            <div className="form-group">
              <div className="input-wrapper">
                <input
                  type="text"
                  className="form-input"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å Username"
                  required
                />
                <div className="input-focus-border"></div>
              </div>
            </div>

            <div className="form-group">
              <div className="input-wrapper">
                <input
                  type="password"
                  className="form-input"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                  required
                />
                <div className="input-focus-border"></div>
              </div>
            </div>

            <div className="form-group">
              <div className="input-wrapper">
                <input
                  type="password"
                  className="form-input"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                  required
                />
                <div className="input-focus-border"></div>
              </div>
            </div>

            {error && (
              <div className="error-message">
                <div className="error-icon">‚ö†Ô∏è</div>
                <span>{error}</span>
              </div>
            )}

            <button
              type="submit"
              className={`register-btn ${loading ? 'loading' : ''}`}
              disabled={loading}
            >
              <span className="btn-text">
                {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å...' : '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'}
              </span>
              <div className="btn-loading-spinner"></div>
            </button>

            <div className="login-section">
              <p className="login-text">‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß?</p>
              <Link to="/" className="login-btn-link">
                <span>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</span>
                <div className="btn-arrow">‚Üê</div>
              </Link>
            </div>
          </form>
        </div>
      </div>

      {/* Footer */}
      <div className="register-footer">
        <p>¬© 2024 SA HOS APP. All rights reserved.</p>
      </div>
    </div>
  );
}

export default Register;
