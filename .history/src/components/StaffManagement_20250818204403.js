import React, { useState, useEffect } from 'react';
import { collection, addDoc, updateDoc, deleteDoc, doc, getDocs, getDoc, writeBatch } from 'firebase/firestore';
import { auth } from '../firebase';
import { db } from '../firebase';
import './StaffManagement.css';

function StaffManagement() {
  const [staffList, setStaffList] = useState([]);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingStaff, setEditingStaff] = useState(null);
  const [filterPosition, setFilterPosition] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [currentAdmin, setCurrentAdmin] = useState(null);

  // р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Яр╕нр╕гр╣Мр╕б
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    position: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е',
    department: '',
    order: 1,
    canEditSchedule: true,
    canAssignTasks: true
  });

  const positions = [
    { value: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е', label: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е', color: '#667eea' },
    { value: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е', label: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е', color: '#f093fb' },
    { value: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й', label: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й', color: '#4facfe' },
    { value: 'Part time', label: 'Part time', color: '#ff9a9e' }
  ];

  const departments = [
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕нр╕╕р╕Ър╕▒р╕Хр╕┤р╣Ар╕лр╕Хр╕╕',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Бр╕╕р╕бр╕▓р╕гр╣Ар╕зр╕Кр╕Бр╕гр╕гр╕б',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 1',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕лр╕Нр╕┤р╕З',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 2',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Бр╕гр╕░р╕Фр╕╣р╕Бр╕лр╕Нр╕┤р╕З',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Бр╕гр╕░р╕Фр╕╣р╕Бр╕Кр╕▓р╕в',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Юр╕┤р╣Ар╕ир╕й Premium',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╣Вр╕гр╕Др╕Хр╕┤р╕Фр╣Ар╕Кр╕╖р╣Йр╕н',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Юр╕┤р╣Ар╕ир╕й 5',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Юр╕┤р╣Ар╕ир╕й 4',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Бр╕╢р╣Ир╕Зр╕зр╕┤р╕Бр╕др╕Хр╕┤р╕нр╕▓р╕вр╕╕р╕гр╕Бр╕гр╕гр╕б',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в р╕Хр╕▓ р╕лр╕╣ р╕Др╕н р╕Ир╕бр╕╣р╕Б',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕нр╕▓р╕вр╕╕р╕гр╕Бр╕гр╕гр╕б 2',
    'р╕лр╕нр╕нр╕ар╕┤р╕Ър╕▓р╕ер╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕зр╕┤р╕Бр╕др╕Хр╕┤р╣Вр╕гр╕Др╕лр╕▒р╕зр╣Гр╕И',
    'р╕Юр╕┤р╣Ар╕ир╕й VIP',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕лр╕Нр╕┤р╕З 1',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕лр╕Нр╕┤р╕З 2',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Щр╕▓р╕гр╕╡р╣Ар╕зр╕К',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕лр╕ер╕▒р╕Зр╕Др╕ер╕нр╕Ф',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 1',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 2',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕нр╕▓р╕вр╕╕р╕гр╕Бр╕гр╕гр╕б 1',
    'р╣Др╕Хр╣Ар╕Чр╕╡р╕вр╕б',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕б 1',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕б 2',
    'NICU',
    'SNB',
    'р╕лр╣Йр╕нр╕Зр╕Др╕ер╕нр╕Ф',
    'OR',
    'OR minor',
    'ER'
  ];

  // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  useEffect(() => {
    loadStaff();
    loadCurrentAdmin();
  }, []);

  // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕нр╕Фр╕бр╕┤р╕Щр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
  const loadCurrentAdmin = async () => {
    try {
      const user = auth.currentUser;
      if (user) {
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        if (userDoc.exists()) {
          const userData = userDoc.data();
          setCurrentAdmin(userData);
          // р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч formData р╣Гр╕лр╣Йр╕бр╕╡р╣Бр╕Ьр╕Щр╕Бр╕Вр╕нр╕Зр╣Бр╕нр╕Фр╕бр╕┤р╕Щ
          setFormData(prev => ({
            ...prev,
            department: userData.department || ''
          }));
        }
      }
    } catch (error) {
      console.error('Error loading current admin:', error);
    }
  };

  const loadStaff = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, 'staff'));
      const staff = [];
      querySnapshot.forEach((doc) => {
        staff.push({ id: doc.id, ...doc.data() });
      });
      
      // р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╕р╕Бр╕Др╕Щ
      console.log('ЁЯФН StaffManagement - All staff data:');
      staff.forEach((staffMember, index) => {
        console.log(`ЁЯФН Staff ${index + 1}:`, {
          name: `${staffMember.firstName} ${staffMember.lastName}`,
          position: staffMember.position,
          canEditSchedule: staffMember.canEditSchedule,
          canAssignTasks: staffMember.canAssignTasks,
          department: staffMember.department
        });
      });
      
      // р╣Ар╕гр╕╡р╕вр╕Зр╕ер╕│р╕Фр╕▒р╕Ър╕Хр╕▓р╕б order
      staff.sort((a, b) => (a.order || 0) - (b.order || 0));
      setStaffList(staff);
    } catch (error) {
      console.error('Error loading staff:', error);
    } finally {
      setLoading(false);
    }
  };

  // р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕лр╕бр╣И
  const handleAddStaff = async (e) => {
    e.preventDefault();
    try {
      const newOrder = staffList.length > 0 ? Math.max(...staffList.map(s => s.order || 0)) + 1 : 1;
      await addDoc(collection(db, 'staff'), {
        ...formData,
        order: newOrder,
        createdAt: new Date().toISOString()
      });
      setShowAddModal(false);
      resetForm();
      loadStaff();
    } catch (error) {
      console.error('Error adding staff:', error);
    }
  };

  // р╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  const handleEditStaff = async (e) => {
    e.preventDefault();
    try {
      await updateDoc(doc(db, 'staff', editingStaff.id), {
        ...formData,
        updatedAt: new Date().toISOString()
      });
      setShowEditModal(false);
      setEditingStaff(null);
      resetForm();
      loadStaff();
    } catch (error) {
      console.error('Error updating staff:', error);
    }
  };

  // р╕ер╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  const handleDeleteStaff = async (staffId) => {
    if (window.confirm('р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕Щр╕╡р╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И?')) {
      try {
        await deleteDoc(doc(db, 'staff', staffId));
        loadStaff();
      } catch (error) {
        console.error('Error deleting staff:', error);
      }
    }
  };

  // р╕Ыр╕гр╕▒р╕Ър╕ер╕│р╕Фр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Хр╕▓р╕бр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф
  const reorderStaff = async () => {
    const targetOrder = [
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Ыр╕гр╕░р╕Щр╕нр╕б', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕ир╕┤р╕гр╕┤р╕Щр╕Чр╕гр╕▓', 'р╕Щр╕▓р╕Зр╕лр╕Чр╕▒р╕вр╕Кр╕Щр╕Б', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╣Вр╕вр╕Шр╕Бр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Ыр╕▓р╕Ур╕┤р╕кр╕гр╕▓',
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Вр╕зр╕▒р╕Нр╣Ар╕гр╕╖р╕нр╕Щ', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕зр╕гр╕гр╕Ур╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Щр╕др╕бр╕е', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕нр╕бр╕ер╕Бр╕▓р╕Щр╕Хр╣М', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Щр╕Щр╕Чр╕┤р╕вр╕▓',
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Бр╕гр╕Бр╕Щр╕Б', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕гр╕╡р╕гр╕▒р╕Хр╕Щр╣М', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Шр╕┤р╕Хр╕гр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕зр╕┤р╕ар╕▓р╕зр╕╡', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Юр╕Ур╕┤р╕Фр╕▓',
      'р╕Щр╕▓р╕вр╕ар╕▓р╕Ур╕╕р╕зр╕▒р╕Тр╕Щр╣М', 'р╕кр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Ур╕▒р╕Чр╕Кр╕Бр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Фр╕зр╕Зр╣Бр╕Бр╣Йр╕з', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕нр╕гр╕нр╕╕р╕йр╕▓',
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕нр╕▒р╕бр╕Юр╕г', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Фр╕зр╕Зр╕Юр╕г', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Бр╕▓р╕Нр╕Ир╕Щр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕гр╕╕р╣Йр╕Зр╕Ир╕┤р╕Щр╕Фр╕▓'
    ];

    try {
      const batch = writeBatch(db);
      
      for (let i = 0; i < targetOrder.length; i++) {
        const staff = staffList.find(s => 
          `${s.firstName} ${s.lastName}`.includes(targetOrder[i])
        );
        
        if (staff) {
          const staffRef = doc(db, 'staff', staff.id);
          batch.update(staffRef, { order: i + 1 });
        }
      }
      
      await batch.commit();
      loadStaff();
      alert('р╕Ыр╕гр╕▒р╕Ър╕ер╕│р╕Фр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з');
    } catch (error) {
      console.error('Error reordering staff:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕ер╕│р╕Фр╕▒р╕Ъ');
    }
  };

  // р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з
  const updateExistingStaffDepartments = async () => {
    if (!currentAdmin?.department) {
      alert('р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ьр╕Щр╕Бр╕Вр╕нр╕Зр╣Бр╕нр╕Фр╕бр╕┤р╕Щ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й');
      return;
    }

    if (!window.confirm(`р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щ "${currentAdmin.department}" р╕лр╕гр╕╖р╕нр╣Др╕бр╣И?\n\nтЪая╕П р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕: р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕бр╕╡р╣Бр╕Ьр╕Щр╕Бр╕Ир╕░р╕Цр╕╣р╕Бр╕Бр╕│р╕лр╕Щр╕Фр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Ър╣Бр╕нр╕Фр╕бр╕┤р╕Щ\nр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╕Щр╕╡р╣Йр╕нр╕▓р╕Ир╣Гр╕Кр╣Йр╣Ар╕зр╕ер╕▓р╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И`)) {
      return;
    }

    try {
      const batch = writeBatch(db);
      let updatedCount = 0;

      staffList.forEach(staff => {
        if (!staff.department) {
          const staffRef = doc(db, 'staff', staff.id);
          batch.update(staffRef, { 
            department: currentAdmin.department,
            updatedAt: new Date().toISOString()
          });
          updatedCount++;
        }
      });

      if (updatedCount > 0) {
        await batch.commit();
        loadStaff();
        alert(`р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з ${updatedCount} р╕Др╕Щ\nр╣Бр╕Ьр╕Щр╕Б: ${currentAdmin.department}`);
      } else {
        alert('р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╕р╕Бр╕Др╕Щр╕бр╕╡р╣Бр╕Ьр╕Щр╕Бр╣Бр╕ер╣Йр╕з');
      }
    } catch (error) {
      console.error('Error updating staff departments:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Б');
    }
  };

  // р╣Ар╕Ыр╕┤р╕Фр╣Вр╕бр╕Фр╕▒р╕ер╣Бр╕Бр╣Йр╣Др╕В
  const openEditModal = (staff) => {
    setEditingStaff(staff);
    setFormData({
      firstName: staff.firstName,
      lastName: staff.lastName,
      position: staff.position,
      department: staff.department || currentAdmin?.department || '',
      order: staff.order || 1,
      canEditSchedule: staff.canEditSchedule,
      canAssignTasks: staff.canAssignTasks
    });
    setShowEditModal(true);
  };

  // р╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕Яр╕нр╕гр╣Мр╕б
  const resetForm = () => {
    setFormData({
      firstName: '',
      lastName: '',
      position: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е',
      department: currentAdmin?.department || '',
      order: 1,
      canEditSchedule: true,
      canAssignTasks: true
    });
  };

  // р╕Яр╕┤р╕ер╣Ар╕Хр╕нр╕гр╣Мр╣Бр╕ер╕░р╕Др╣Йр╕Щр╕лр╕▓
  const filteredStaff = staffList.filter(staff => {
    const matchesPosition = filterPosition === 'all' || staff.position === filterPosition;
    const matchesSearch = `${staff.firstName} ${staff.lastName}`.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesPosition && matchesSearch;
  });

  // р╕Щр╕▒р╕Ър╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Хр╕▓р╕бр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З
  const getPositionCount = (position) => {
    return staffList.filter(staff => staff.position === position).length;
  };

  // р╣Ар╕Юр╕┤р╣Ир╕бр╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Бр╕Ър╕Ър╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
  const restoreMissingStaffComplete = async () => {
    try {
      console.log('ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Бр╕Ър╕Ър╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М...');
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╣Ир╕нр╕Щр╕зр╣Ир╕▓р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const staffSnapshot = await getDocs(collection(db, 'staff'));
      const existingStaff = staffSnapshot.docs.find(doc => {
        const data = doc.data();
        return data.firstName === 'р╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓' && data.lastName === 'р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К';
      });
      
      if (existingStaff) {
        alert('тЬЕ р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓ р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕гр╕░р╕Ър╕Ър╣Бр╕ер╣Йр╕з!');
        return existingStaff.id;
      }
      
      // р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╕нр╕Зр╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓ р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К
      const missingStaff = {
        firstName: 'р╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓',
        lastName: 'р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К',
        position: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е',
        department: currentAdmin?.department || 'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕нр╕╕р╕Ър╕▒р╕Хр╕┤р╣Ар╕лр╕Хр╕╕',
        order: 17,
        canEditSchedule: true,
        canAssignTasks: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      
      // р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Бр╕ер╕▒р╕Ър╣Ар╕Вр╣Йр╕▓р╣Др╕Ы
      const staffRef = await addDoc(collection(db, 'staff'), missingStaff);
      console.log('тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И ID:', staffRef.id);
      
      // р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч staffList р╣Гр╕Щ state р╣Бр╕ер╕░р╣Ар╕гр╕╡р╕вр╕Зр╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И
      const newStaff = { id: staffRef.id, ...missingStaff };
      const updatedStaffList = [...staffList, newStaff].sort((a, b) => (a.order || 0) - (b.order || 0));
      setStaffList(updatedStaffList);
      
      // р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╣Ар╕Бр╣Ир╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕Щр╕╡р╣Й
      await restoreScheduleData(newStaff.id);
      
      alert('р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓ р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К р╣Бр╕Ър╕Ър╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з');
      return staffRef.id;
      
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Бр╕╣р╣Йр╕Др╕╖р╕Щ:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е');
      return null;
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г
  const restoreScheduleData = async (newStaffId) => {
    try {
      console.log('ЁЯУЕ р╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г...');
      
      // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
      const schedulesSnapshot = await getDocs(collection(db, 'schedules'));
      
      for (const scheduleDoc of schedulesSnapshot.docs) {
        const scheduleData = scheduleDoc.data();
        let hasChanges = false;
        
        // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╕зр╕▒р╕Щ
        if (scheduleData.shifts) {
          for (const day in scheduleData.shifts) {
            const dayData = scheduleData.shifts[day];
            
            // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Кр╕╖р╣Ир╕нр╣Ар╕Бр╣Ир╕▓р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
            for (const staffId in dayData) {
              const shiftData = dayData[staffId];
              
              // р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕зр╕гр╕Чр╕╡р╣Ир╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Кр╕╖р╣Ир╕н "р╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓" р╕лр╕гр╕╖р╕н "р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К"
              if (typeof shiftData === 'string' && 
                  (shiftData.includes('р╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓') || shiftData.includes('р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К'))) {
                
                // р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕зр╕гр╣Гр╕лр╣Йр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╣Гр╕лр╕бр╣И
                dayData[newStaffId] = shiftData;
                hasChanges = true;
                
                console.log(`ЁЯФД р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Ар╕зр╕гр╕зр╕▒р╕Щр╕Чр╕╡р╣И ${day}: ${shiftData}`);
              }
            }
          }
          
          // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Бр╕ер╣Йр╕з
          if (hasChanges) {
            await setDoc(doc(db, 'schedules', scheduleDoc.id), {
              ...scheduleData,
              updatedAt: new Date().toISOString(),
              restoredStaffId: newStaffId
            });
            console.log(`тЬЕ р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г ${scheduleDoc.id} р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в`);
          }
        }
      }
      
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г:', error);
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ър╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф
  const checkDataIntegrityDetailed = async () => {
    try {
      console.log('ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣Мр╕Вр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ър╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф...');
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
      const staffSnapshot = await getDocs(collection(db, 'staff'));
      console.log('ЁЯСе р╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕Щр╕гр╕░р╕Ър╕Ъ:', staffSnapshot.size);
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г
      const schedulesSnapshot = await getDocs(collection(db, 'schedules'));
      console.log('ЁЯУЕ р╕Ир╕│р╕Щр╕зр╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╣Гр╕Щр╕гр╕░р╕Ър╕Ъ:', schedulesSnapshot.size);
      
      // р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
      const staffList = [];
      staffSnapshot.forEach((doc) => {
        const data = doc.data();
        staffList.push({ id: doc.id, ...data });
        console.log(`ЁЯСд ${data.firstName} ${data.lastName} - ${data.position} (р╕ер╕│р╕Фр╕▒р╕Ър╕Чр╕╡р╣И ${data.order})`);
      });
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓ р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const hasSukanya = staffList.some(staff => 
        staff.firstName === 'р╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓' && staff.lastName === 'р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К'
      );
      
      console.log('ЁЯФН р╕бр╕╡р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓ р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К р╣Гр╕Щр╕гр╕░р╕Ър╕Ъ:', hasSukanya);
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Кр╕╖р╣Ир╕нр╣Ар╕Бр╣Ир╕▓
      let scheduleReferences = [];
      schedulesSnapshot.forEach((doc) => {
        const scheduleData = doc.data();
        if (scheduleData.shifts) {
          for (const day in scheduleData.shifts) {
            const dayData = scheduleData.shifts[day];
            for (const staffId in dayData) {
              const shiftData = dayData[staffId];
              if (typeof shiftData === 'string' && 
                  (shiftData.includes('р╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓') || shiftData.includes('р╕зр╕╕р╕Тр╕┤р╣Ар╕Фр╕К'))) {
                scheduleReferences.push({
                  scheduleId: doc.id,
                  day: day,
                  staffId: staffId,
                  shiftData: shiftData
                });
              }
            }
          }
        }
      });
      
      console.log('ЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╕Чр╕╡р╣Ир╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Кр╕╖р╣Ир╕нр╣Ар╕Бр╣Ир╕▓:', scheduleReferences);
      
      return {
        staffCount: staffSnapshot.size,
        scheduleCount: schedulesSnapshot.size,
        staffData: staffList,
        hasSukanya: hasSukanya,
        scheduleReferences: scheduleReferences
      };
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:', error);
      return null;
    }
  };

  if (loading) {
    return (
      <div className="dashboard-content">
        <div className="loading-spinner">р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Ф...</div>
      </div>
    );
  }

  return (
    <div className="dashboard-content">
      <h2>ЁЯСе р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</h2>
      <p>р╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</p>

      {/* р╕кр╕Цр╕┤р╕Хр╕┤ */}
      <div className="stats-container">
        <div className="stat-card">
          <div className="stat-number">{staffList.length}</div>
          <div className="stat-label">р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{getPositionCount('р╕Юр╕вр╕▓р╕Ър╕▓р╕е')}</div>
          <div className="stat-label">р╕Юр╕вр╕▓р╕Ър╕▓р╕е</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{getPositionCount('р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е')}</div>
          <div className="stat-label">р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{getPositionCount('р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й')}</div>
          <div className="stat-label">р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й</div>
        </div>
        <div className="stat-card warning">
          <div className="stat-number">{staffList.filter(s => !s.department).length}</div>
          <div className="stat-label">р╣Др╕бр╣Ир╕бр╕╡р╣Бр╕Ьр╕Щр╕Б</div>
        </div>
      </div>

      {/* р╕Яр╕┤р╕ер╣Ар╕Хр╕нр╕гр╣Мр╣Бр╕ер╕░р╕Др╣Йр╕Щр╕лр╕▓ */}
      <div className="controls-container">
        <div className="search-box">
          <input
            type="text"
            placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Хр╕▓р╕бр╕Кр╕╖р╣Ир╕н..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        <div className="filter-container">
          <select
            value={filterPosition}
            onChange={(e) => setFilterPosition(e.target.value)}
            className="filter-select"
          >
            <option value="all">р╕Чр╕╕р╕Бр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З</option>
            {positions.map(pos => (
              <option key={pos.value} value={pos.value}>{pos.label}</option>
            ))}
          </select>
        </div>
                 <button
           onClick={() => setShowAddModal(true)}
           className="btn btn-primary add-btn"
         >
           тЮХ р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
         </button>
         <button
           onClick={reorderStaff}
           className="btn btn-warning reorder-btn"
         >
           ЁЯФД р╕Ыр╕гр╕▒р╕Ър╕ер╕│р╕Фр╕▒р╕Ър╕Хр╕▓р╕бр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕н
         </button>
         <button
           onClick={updateExistingStaffDepartments}
           className="btn btn-info update-dept-btn"
           title="р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕Хр╕▓р╕бр╕ер╕│р╕Фр╕▒р╕Ър╣Бр╕ер╕░р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З"
         >
           ЁЯПв р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
         </button>
      </div>

      {/* р╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И */}
      <div className="table-container">
        <table className="staff-table">
                     <thead>
             <tr>
               <th>р╕ер╕│р╕Фр╕▒р╕Ъ</th>
               <th>р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е</th>
               <th>р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З</th>
               <th>р╣Бр╕Ьр╕Щр╕Б</th>
               <th>р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г</th>
             </tr>
           </thead>
          <tbody>
            {filteredStaff.map((staff, index) => (
              <tr key={staff.id}>
                <td>{index + 1}</td>
                <td className="staff-name">
                  {staff.firstName} {staff.lastName}
                </td>
                <td>
                  <span 
                    className="position-badge"
                    style={{ backgroundColor: positions.find(p => p.value === staff.position)?.color }}
                  >
                    {staff.position}
                  </span>
                </td>
                <td>
                  <span className="department-badge">
                    {staff.department || 'р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕'}
                  </span>
                </td>
                                                  <td className="permissions-actions">
                   <div className="all-icons">
                     {staff.canEditSchedule && (
                       <span className="permission-icon schedule" title="р╣Бр╕Бр╣Йр╣Др╕Вр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г">ЁЯУЕ</span>
                     )}
                     {staff.canAssignTasks && (
                       <span className="permission-icon tasks" title="р╕бр╕нр╕Ър╕лр╕бр╕▓р╕вр╕Зр╕▓р╕Щ">ЁЯУЛ</span>
                     )}
                     <span
                       onClick={() => openEditModal(staff)}
                       className="permission-icon edit"
                       title="р╣Бр╕Бр╣Йр╣Др╕В"
                     >
                       тЬПя╕П
                     </span>
                     <span
                       onClick={() => handleDeleteStaff(staff.id)}
                       className="permission-icon delete"
                       title="р╕ер╕Ъ"
                     >
                       ЁЯЧСя╕П
                     </span>
                   </div>
                 </td>
              </tr>
            ))}
          </tbody>
        </table>
        {filteredStaff.length === 0 && (
          <div className="no-data">
            <p>р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</p>
          </div>
        )}
      </div>

             {/* р╣Вр╕бр╕Фр╕▒р╕ер╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И */}
       {showAddModal && (
         <StaffModal
           title="р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕лр╕бр╣И"
           formData={formData}
           setFormData={setFormData}
           onSubmit={handleAddStaff}
           onClose={() => {
             setShowAddModal(false);
             resetForm();
           }}
           positions={positions}
           departments={departments}
           staffList={staffList}
           currentAdmin={currentAdmin}
         />
       )}

       {/* р╣Вр╕бр╕Фр╕▒р╕ер╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И */}
       {showEditModal && (
         <StaffModal
           title="р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И"
           formData={formData}
           setFormData={setFormData}
           onSubmit={handleEditStaff}
           onClose={() => {
             setShowEditModal(false);
             setEditingStaff(null);
             resetForm();
           }}
           positions={positions}
           departments={departments}
           staffList={staffList}
           currentAdmin={currentAdmin}
         />
       )}
    </div>
  );
}

// р╣Вр╕бр╕Фр╕▒р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Юр╕┤р╣Ир╕б/р╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
function StaffModal({ title, formData, setFormData, onSubmit, onClose, positions, departments, staffList, currentAdmin }) {
  return (
    <div className="modal">
      <div className="modal-content staff-modal">
        <button className="modal-close" onClick={onClose}>├Ч</button>
        
        <div className="modal-header">
          <h3 className="modal-title">{title}</h3>
        </div>

        <form onSubmit={onSubmit} className="staff-form">
          {/* р╣Бр╕Цр╕зр╕Чр╕╡р╣И 1: р╕Кр╕╖р╣Ир╕нр╣Бр╕ер╕░р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е */}
          <div className="form-row">
            <div className="form-group">
              <label className="form-label">р╕Кр╕╖р╣Ир╕н</label>
              <input
                type="text"
                className="form-input"
                value={formData.firstName}
                onChange={(e) => setFormData({...formData, firstName: e.target.value})}
                placeholder="р╕Кр╕╖р╣Ир╕н"
                required
              />
            </div>
            <div className="form-group">
              <label className="form-label">р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е</label>
              <input
                type="text"
                className="form-input"
                value={formData.lastName}
                onChange={(e) => setFormData({...formData, lastName: e.target.value})}
                placeholder="р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е"
                required
              />
            </div>
          </div>

          {/* р╣Бр╕Цр╕зр╕Чр╕╡р╣И 2: р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕Зр╣Бр╕ер╕░р╣Бр╕Ьр╕Щр╕Б */}
          <div className="form-row">
            <div className="form-group">
              <label className="form-label">р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З</label>
              <select
                className="form-input"
                value={formData.position}
                onChange={(e) => setFormData({...formData, position: e.target.value})}
                required
              >
                {positions.map(pos => (
                  <option key={pos.value} value={pos.value}>{pos.label}</option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label className="form-label">р╣Бр╕Ьр╕Щр╕Б</label>
              <select
                className="form-input"
                value={formData.department}
                onChange={(e) => setFormData({...formData, department: e.target.value})}
                required
              >
                <option value="">р╣Ар╕ер╕╖р╕нр╕Бр╣Бр╕Ьр╕Щр╕Б</option>
                {departments.map((dept, index) => (
                  <option key={index} value={dept}>{dept}</option>
                ))}
              </select>
            </div>
          </div>

          {/* р╣Бр╕Цр╕зр╕Чр╕╡р╣И 3: р╕ер╕│р╕Фр╕▒р╕Ър╣Бр╕ер╕░р╕кр╕┤р╕Чр╕Шр╕┤р╣М */}
          <div className="form-row">
            <div className="form-group">
              <label className="form-label">р╕ер╕│р╕Фр╕▒р╕Ъ</label>
              <select
                className="form-input"
                value={formData.order}
                onChange={(e) => setFormData({...formData, order: parseInt(e.target.value)})}
                required
              >
                {Array.from({ length: staffList.length + 1 }, (_, i) => (
                  <option key={i + 1} value={i + 1}>
                    {i + 1} {i === staffList.length ? '(р╕Чр╣Йр╕▓р╕вр╕кр╕╕р╕Ф)' : ''}
                  </option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label className="form-label">р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕г</label>
              <div className="checkbox-group">
                <label className="checkbox-item">
                  <input
                    type="checkbox"
                    checked={formData.canEditSchedule}
                    onChange={(e) => setFormData({...formData, canEditSchedule: e.target.checked})}
                  />
                  <span>р╣Бр╕Бр╣Йр╣Др╕Вр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г</span>
                </label>
                <label className="checkbox-item">
                  <input
                    type="checkbox"
                    checked={formData.canAssignTasks}
                    onChange={(e) => setFormData({...formData, canAssignTasks: e.target.checked})}
                  />
                  <span>р╕бр╕нр╕Ър╕лр╕бр╕▓р╕вр╕Зр╕▓р╕Щ</span>
                </label>
              </div>
            </div>
          </div>

          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn btn-secondary">
              р╕вр╕Бр╣Ар╕ер╕┤р╕Б
            </button>
            <button type="submit" className="btn btn-primary">
              р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default StaffManagement;
