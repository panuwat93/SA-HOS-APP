import React, { useState, useEffect } from 'react';
import { collection, getDocs, doc, setDoc, getDoc } from 'firebase/firestore';
import { db } from '../firebase';
import './OnCallSchedule.css';

function OnCallSchedule({ user }) {
  const [staffList, setStaffList] = useState([]);
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [onCallData, setOnCallData] = useState({});
  const [loading, setLoading] = useState(true);
  const [popup, setPopup] = useState({ show: false, message: '', type: 'success' });

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á popup
  const showPopup = (message, type = 'success') => {
    setPopup({ show: true, message, type });
    setTimeout(() => {
      setPopup({ show: false, message: '', type: 'success' });
    }, 3000);
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
  useEffect(() => {
    loadStaff();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• On call ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ
  useEffect(() => {
    if (staffList.length > 0) {
      loadOnCallData();
    }
  }, [staffList, currentMonth, currentYear]);

  const loadStaff = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, 'staff'));
      const staff = [];
      querySnapshot.forEach((doc) => {
        staff.push({ id: doc.id, ...doc.data() });
      });
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° order
      staff.sort((a, b) => (a.order || 0) - (b.order || 0));
      setStaffList(staff);
    } catch (error) {
      console.error('Error loading staff:', error);
    } finally {
      setLoading(false);
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• On call
  const loadOnCallData = async () => {
    try {
      const onCallId = `oncall_${currentYear}_${currentMonth + 1}`;
      const onCallDoc = await getDoc(doc(db, 'onCallSchedules', onCallId));
      
      if (onCallDoc.exists()) {
        setOnCallData(onCallDoc.data().schedule || {});
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
        const emptyOnCallData = {};
        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
        
        for (let day = 1; day <= daysInMonth; day++) {
          emptyOnCallData[day] = {
            primary: '',      // On call ‡∏´‡∏•‡∏±‡∏Å
            secondary: '',    // On call ‡∏£‡∏≠‡∏á
            backup: ''        // On call ‡∏™‡∏≥‡∏£‡∏≠‡∏á
          };
        }
        
        setOnCallData(emptyOnCallData);
      }
    } catch (error) {
      console.error('Error loading on-call data:', error);
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• On call
  const saveOnCallData = async () => {
    try {
      const onCallId = `oncall_${currentYear}_${currentMonth + 1}`;
      await setDoc(doc(db, 'onCallSchedules', onCallId), {
        month: currentMonth + 1,
        year: currentYear,
        schedule: onCallData,
        updatedAt: new Date().toISOString(),
        updatedBy: user.uid
      });
      showPopup('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á On call ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    } catch (error) {
      console.error('Error saving on-call data:', error);
      showPopup('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', 'error');
    }
  };

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• On call
  const updateOnCallData = (day, field, value) => {
    setOnCallData(prev => ({
      ...prev,
      [day]: {
        ...prev[day],
        [field]: value
      }
    }));
  };

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  const changeMonth = (direction) => {
    if (direction === 'prev') {
      if (currentMonth === 0) {
        setCurrentMonth(11);
        setCurrentYear(prev => prev - 1);
      } else {
        setCurrentMonth(prev => prev - 1);
      }
    } else {
      if (currentMonth === 11) {
        setCurrentMonth(0);
        setCurrentYear(prev => prev + 1);
      } else {
        setCurrentMonth(prev => prev + 1);
      }
    }
  };

  // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  const getMonthName = () => {
    const months = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    return months[currentMonth];
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏ô
  const generateDays = () => {
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    const days = [];
    
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  if (loading) {
    return (
      <div className="oncall-schedule">
        <div className="loading-spinner">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      </div>
    );
  }

  const days = generateDays();

  return (
    <div className="oncall-schedule">
      <h2>üìû ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á On call</h2>
      <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á On call ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</p>

      {/* ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
      <div className="schedule-controls">
        <div className="month-navigation">
          <button 
            className="month-nav-btn prev"
            onClick={() => changeMonth('prev')}
          >
            ‚óÄ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
          </button>
          <h3 className="current-month">
            {getMonthName()} {currentYear}
          </h3>
          <button 
            className="month-nav-btn next"
            onClick={() => changeMonth('next')}
          >
            ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂
          </button>
        </div>

        <div className="action-buttons">
          <button onClick={loadOnCallData} className="btn btn-info">üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
          <button onClick={saveOnCallData} className="btn btn-primary">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
        </div>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á On call */}
      <div className="oncall-table-container">
        <table className="oncall-table">
          <thead>
            <tr>
              <th className="day-header">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
              <th className="primary-header">On call ‡∏´‡∏•‡∏±‡∏Å</th>
              <th className="secondary-header">On call ‡∏£‡∏≠‡∏á</th>
              <th className="backup-header">On call ‡∏™‡∏≥‡∏£‡∏≠‡∏á</th>
            </tr>
          </thead>
          <tbody>
            {days.map(day => (
              <tr key={day} className={day % 2 === 0 ? 'even-row' : 'odd-row'}>
                <td className="day-cell">{day}</td>
                <td className="primary-cell">
                  <select
                    value={onCallData[day]?.primary || ''}
                    onChange={(e) => updateOnCallData(day, 'primary', e.target.value)}
                    className="staff-select"
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</option>
                    {staffList.map(staff => (
                      <option key={staff.id} value={staff.id}>
                        {staff.firstName} {staff.lastName} ({staff.position})
                      </option>
                    ))}
                  </select>
                </td>
                <td className="secondary-cell">
                  <select
                    value={onCallData[day]?.secondary || ''}
                    onChange={(e) => updateOnCallData(day, 'secondary', e.target.value)}
                    className="staff-select"
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</option>
                    {staffList.map(staff => (
                      <option key={staff.id} value={staff.id}>
                        {staff.firstName} {staff.lastName} ({staff.position})
                      </option>
                    ))}
                  </select>
                </td>
                <td className="backup-cell">
                  <select
                    value={onCallData[day]?.backup || ''}
                    onChange={(e) => updateOnCallData(day, 'backup', e.target.value)}
                    className="staff-select"
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</option>
                    {staffList.map(staff => (
                      <option key={staff.id} value={staff.id}>
                        {staff.firstName} {staff.lastName} ({staff.position})
                      </option>
                    ))}
                  </select>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
      {popup.show && (
        <div className={`popup ${popup.type}`}>
          <div className="popup-content">
            <span className="popup-message">{popup.message}</span>
            <button 
              className="popup-close"
              onClick={() => setPopup({ show: false, message: '', type: 'success' })}
            >
              √ó
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default OnCallSchedule;
