import React, { useState, useEffect } from 'react';
import { collection, addDoc, updateDoc, deleteDoc, doc, getDocs, getDoc, writeBatch, setDoc } from 'firebase/firestore';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../firebase';
import { db } from '../firebase';
import './StaffManagement.css';

function StaffManagement() {
  const [staffList, setStaffList] = useState([]);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingStaff, setEditingStaff] = useState(null);
  const [filterPosition, setFilterPosition] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [currentAdmin, setCurrentAdmin] = useState(null);

  // р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Яр╕нр╕гр╣Мр╕б
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    position: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е',
    department: '',
    order: 1,
    canEditSchedule: true,
    canAssignTasks: true
  });

  const positions = [
    { value: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е', label: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е', color: '#667eea' },
    { value: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е', label: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е', color: '#f093fb' },
    { value: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й', label: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й', color: '#4facfe' },
    { value: 'Part time', label: 'Part time', color: '#ff9a9e' }
  ];

  const departments = [
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕нр╕╕р╕Ър╕▒р╕Хр╕┤р╣Ар╕лр╕Хр╕╕',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Бр╕╕р╕бр╕▓р╕гр╣Ар╕зр╕Кр╕Бр╕гр╕гр╕б',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 1',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕лр╕Нр╕┤р╕З',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 2',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Бр╕гр╕░р╕Фр╕╣р╕Бр╕лр╕Нр╕┤р╕З',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕Бр╕гр╕░р╕Фр╕╣р╕Бр╕Кр╕▓р╕в',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Юр╕┤р╣Ар╕ир╕й Premium',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╣Вр╕гр╕Др╕Хр╕┤р╕Фр╣Ар╕Кр╕╖р╣Йр╕н',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Юр╕┤р╣Ар╕ир╕й 5',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Юр╕┤р╣Ар╕ир╕й 4',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Бр╕╢р╣Ир╕Зр╕зр╕┤р╕Бр╕др╕Хр╕┤р╕нр╕▓р╕вр╕╕р╕гр╕Бр╕гр╕гр╕б',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕в р╕Хр╕▓ р╕лр╕╣ р╕Др╕н р╕Ир╕бр╕╣р╕Б',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕нр╕▓р╕вр╕╕р╕гр╕Бр╕гр╕гр╕б 2',
    'р╕лр╕нр╕нр╕ар╕┤р╕Ър╕▓р╕ер╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕зр╕┤р╕Бр╕др╕Хр╕┤р╣Вр╕гр╕Др╕лр╕▒р╕зр╣Гр╕И',
    'р╕Юр╕┤р╣Ар╕ир╕й VIP',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕лр╕Нр╕┤р╕З 1',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕лр╕Нр╕┤р╕З 2',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕Щр╕▓р╕гр╕╡р╣Ар╕зр╕К',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕лр╕ер╕▒р╕Зр╕Др╕ер╕нр╕Ф',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 1',
    'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕нр╕▓р╕вр╕╕р╕Бр╕гр╕гр╕бр╕Кр╕▓р╕в 2',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕нр╕▓р╕вр╕╕р╕гр╕Бр╕гр╕гр╕б 1',
    'р╣Др╕Хр╣Ар╕Чр╕╡р╕вр╕б',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕б 1',
    'р╕лр╣Йр╕нр╕Зр╕Ьр╕╣р╣Йр╕лр╕Щр╕▒р╕Бр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕б 2',
    'NICU',
    'SNB',
    'р╕лр╣Йр╕нр╕Зр╕Др╕ер╕нр╕Ф',
    'OR',
    'OR minor',
    'ER'
  ];

  // р╣Ар╕Юр╕┤р╣Ир╕б state р╕кр╕│р╕лр╕гр╕▒р╕Ър╕лр╕Щр╣Йр╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ
  const [showRecoveryModal, setShowRecoveryModal] = useState(false);
  const [deletedStaffList, setDeletedStaffList] = useState([]);
  const [recoveryLoading, setRecoveryLoading] = useState(false);

  // р╣Ар╕Юр╕┤р╣Ир╕б state р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
  const [showLoginInfoModal, setShowLoginInfoModal] = useState(false);
  const [staffLoginInfo, setStaffLoginInfo] = useState([]);
  const [loginInfoLoading, setLoginInfoLoading] = useState(false);
  
  // р╣Ар╕Юр╕┤р╣Ир╕б state р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Вр╕бр╕Фр╕▒р╕ер╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡
  const [showCreateAccountModal, setShowCreateAccountModal] = useState(false);
  const [creatingStaff, setCreatingStaff] = useState(null);
  
  // р╣Ар╕Юр╕┤р╣Ир╕б state р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
  const [currentPage, setCurrentPage] = useState(0);
  const [searchLoginTerm, setSearchLoginTerm] = useState('');
  const itemsPerPage = 6;

  // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  useEffect(() => {
    loadStaff();
    loadCurrentAdmin();
  }, []);

  // р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕нр╕Фр╕бр╕┤р╕Щр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
  const loadCurrentAdmin = async () => {
    try {
      const user = auth.currentUser;
      if (user) {
        const userDoc = await getDoc(doc(db, 'users', user.uid));
        if (userDoc.exists()) {
          const userData = userDoc.data();
          setCurrentAdmin(userData);
          // р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч formData р╣Гр╕лр╣Йр╕бр╕╡р╣Бр╕Ьр╕Щр╕Бр╕Вр╕нр╕Зр╣Бр╕нр╕Фр╕бр╕┤р╕Щ
          setFormData(prev => ({
            ...prev,
            department: userData.department || ''
          }));
        }
      }
    } catch (error) {
      console.error('Error loading current admin:', error);
    }
  };

  const loadStaff = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, 'staff'));
      const staff = [];
      querySnapshot.forEach((doc) => {
        staff.push({ id: doc.id, ...doc.data() });
      });
      
      // р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╕р╕Бр╕Др╕Щ
      // console.log('ЁЯФН StaffManagement - All staff data:');
      // staff.forEach((staffMember, index) => {
      //   console.log(`ЁЯФН Staff ${index + 1}:`, {
      //     name: `${staffMember.firstName} ${staffMember.lastName}`,
      //     position: staffMember.position,
      //     canEditSchedule: staffMember.canEditSchedule,
      //     canAssignTasks: staffMember.canAssignTasks,
      //     department: staffMember.department
      //   });
      // });
      
      // р╣Ар╕гр╕╡р╕вр╕Зр╕ер╕│р╕Фр╕▒р╕Ър╕Хр╕▓р╕б order
      staff.sort((a, b) => (a.order || 0) - (b.order || 0));
      setStaffList(staff);
    } catch (error) {
      console.error('Error loading staff:', error);
    } finally {
      setLoading(false);
    }
  };

  // р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕лр╕бр╣И
  const handleAddStaff = async (e) => {
    e.preventDefault();
    try {
      const newOrder = staffList.length > 0 ? Math.max(...staffList.map(s => s.order || 0)) + 1 : 1;
      await addDoc(collection(db, 'staff'), {
        ...formData,
        order: newOrder,
        createdAt: new Date().toISOString()
      });
      setShowAddModal(false);
      resetForm();
      loadStaff();
    } catch (error) {
      console.error('Error adding staff:', error);
    }
  };

  // р╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  const handleEditStaff = async (e) => {
    e.preventDefault();
    try {
      await updateDoc(doc(db, 'staff', editingStaff.id), {
        ...formData,
        updatedAt: new Date().toISOString()
      });
      setShowEditModal(false);
      setEditingStaff(null);
      resetForm();
      loadStaff();
    } catch (error) {
      console.error('Error updating staff:', error);
    }
  };

  // р╕ер╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  const handleDeleteStaff = async (staffId) => {
    if (window.confirm('р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕Щр╕╡р╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И?')) {
      try {
        await deleteDoc(doc(db, 'staff', staffId));
        loadStaff();
      } catch (error) {
        console.error('Error deleting staff:', error);
      }
    }
  };

  // р╕Ыр╕гр╕▒р╕Ър╕ер╕│р╕Фр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Хр╕▓р╕бр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф
  const reorderStaff = async () => {
    const targetOrder = [
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Ыр╕гр╕░р╕Щр╕нр╕б', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕ир╕┤р╕гр╕┤р╕Щр╕Чр╕гр╕▓', 'р╕Щр╕▓р╕Зр╕лр╕Чр╕▒р╕вр╕Кр╕Щр╕Б', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╣Вр╕вр╕Шр╕Бр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Ыр╕▓р╕Ур╕┤р╕кр╕гр╕▓',
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Вр╕зр╕▒р╕Нр╣Ар╕гр╕╖р╕нр╕Щ', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕зр╕гр╕гр╕Ур╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Щр╕др╕бр╕е', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕нр╕бр╕ер╕Бр╕▓р╕Щр╕Хр╣М', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Щр╕Щр╕Чр╕┤р╕вр╕▓',
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Бр╕гр╕Бр╕Щр╕Б', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕гр╕╡р╕гр╕▒р╕Хр╕Щр╣М', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Шр╕┤р╕Хр╕гр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕зр╕┤р╕ар╕▓р╕зр╕╡', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Юр╕Ур╕┤р╕Фр╕▓',
      'р╕Щр╕▓р╕вр╕ар╕▓р╕Ур╕╕р╕зр╕▒р╕Тр╕Щр╣М', 'р╕кр╕▓р╕Зр╕кр╕▓р╕зр╕кр╕╕р╕Бр╕▒р╕Нр╕Нр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Ур╕▒р╕Чр╕Кр╕Бр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Фр╕зр╕Зр╣Бр╕Бр╣Йр╕з', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕нр╕гр╕нр╕╕р╕йр╕▓',
      'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕нр╕▒р╕бр╕Юр╕г', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Фр╕зр╕Зр╕Юр╕г', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Бр╕▓р╕Нр╕Ир╕Щр╕▓', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕гр╕╕р╣Йр╕Зр╕Ир╕┤р╕Щр╕Фр╕▓'
    ];

    try {
      const batch = writeBatch(db);
      
      for (let i = 0; i < targetOrder.length; i++) {
        const staff = staffList.find(s => 
          `${s.firstName} ${s.lastName}`.includes(targetOrder[i])
        );
        
        if (staff) {
          const staffRef = doc(db, 'staff', staff.id);
          batch.update(staffRef, { order: i + 1 });
        }
      }
      
      await batch.commit();
      loadStaff();
      alert('р╕Ыр╕гр╕▒р╕Ър╕ер╕│р╕Фр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з');
    } catch (error) {
      console.error('Error reordering staff:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕ер╕│р╕Фр╕▒р╕Ъ');
    }
  };

  // р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з
  const updateExistingStaffDepartments = async () => {
    if (!currentAdmin?.department) {
      alert('р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ьр╕Щр╕Бр╕Вр╕нр╕Зр╣Бр╕нр╕Фр╕бр╕┤р╕Щ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й');
      return;
    }

    if (!window.confirm(`р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щ "${currentAdmin.department}" р╕лр╕гр╕╖р╕нр╣Др╕бр╣И?\n\nтЪая╕П р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕: р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕бр╕╡р╣Бр╕Ьр╕Щр╕Бр╕Ир╕░р╕Цр╕╣р╕Бр╕Бр╕│р╕лр╕Щр╕Фр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Ър╣Бр╕нр╕Фр╕бр╕┤р╕Щ\nр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕гр╕Щр╕╡р╣Йр╕нр╕▓р╕Ир╣Гр╕Кр╣Йр╣Ар╕зр╕ер╕▓р╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И`)) {
      return;
    }

    try {
      const batch = writeBatch(db);
      let updatedCount = 0;

      staffList.forEach(staff => {
        if (!staff.department) {
          const staffRef = doc(db, 'staff', staff.id);
          batch.update(staffRef, { 
            department: currentAdmin.department,
            updatedAt: new Date().toISOString()
          });
          updatedCount++;
        }
      });

      if (updatedCount > 0) {
        await batch.commit();
        loadStaff();
        alert(`р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з ${updatedCount} р╕Др╕Щ\nр╣Бр╕Ьр╕Щр╕Б: ${currentAdmin.department}`);
      } else {
        alert('р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╕р╕Бр╕Др╕Щр╕бр╕╡р╣Бр╕Ьр╕Щр╕Бр╣Бр╕ер╣Йр╕з');
      }
    } catch (error) {
      console.error('Error updating staff departments:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╣Бр╕Ьр╕Щр╕Б');
    }
  };

  // р╣Ар╕Ыр╕┤р╕Фр╣Вр╕бр╕Фр╕▒р╕ер╣Бр╕Бр╣Йр╣Др╕В
  const openEditModal = (staff) => {
    setEditingStaff(staff);
    setFormData({
      firstName: staff.firstName,
      lastName: staff.lastName,
      position: staff.position,
      department: staff.department || currentAdmin?.department || '',
      order: staff.order || 1,
      canEditSchedule: staff.canEditSchedule,
      canAssignTasks: staff.canAssignTasks
    });
    setShowEditModal(true);
  };

  // р╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕Яр╕нр╕гр╣Мр╕б
  const resetForm = () => {
    setFormData({
      firstName: '',
      lastName: '',
      position: 'р╕Юр╕вр╕▓р╕Ър╕▓р╕е',
      department: currentAdmin?.department || '',
      order: 1,
      canEditSchedule: true,
      canAssignTasks: true
    });
  };

  // р╕Яр╕┤р╕ер╣Ар╕Хр╕нр╕гр╣Мр╣Бр╕ер╕░р╕Др╣Йр╕Щр╕лр╕▓
  const filteredStaff = staffList.filter(staff => {
    const matchesPosition = filterPosition === 'all' || staff.position === filterPosition;
    const matchesSearch = `${staff.firstName} ${staff.lastName}`.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesPosition && matchesSearch;
  });

  // р╕Щр╕▒р╕Ър╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Хр╕▓р╕бр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З
  const getPositionCount = (position) => {
    return staffList.filter(staff => staff.position === position).length;
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Ар╕Ыр╕┤р╕Фр╕лр╕Щр╣Йр╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ
  const openRecoveryModal = async () => {
    setShowRecoveryModal(true);
    await scanForDeletedStaff();
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╣Бр╕Бр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Вр╕Фр╕Щр╕ер╕Ъ
  const scanForDeletedStaff = async () => {
    try {
      setRecoveryLoading(true);
      // console.log('ЁЯФН р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Бр╕Бр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Вр╕Фр╕Щр╕ер╕Ъ...');
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
      const currentStaffSnapshot = await getDocs(collection(db, 'staff'));
      const currentStaffIds = currentStaffSnapshot.docs.map(doc => doc.id);
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Кр╕╖р╣Ир╕нр╣Ар╕Бр╣Ир╕▓
      const schedulesSnapshot = await getDocs(collection(db, 'schedules'));
      let deletedStaffData = [];
      
      schedulesSnapshot.forEach((doc) => {
        const scheduleData = doc.data();
        if (scheduleData.shifts) {
          for (const day in scheduleData.shifts) {
            const dayData = scheduleData.shifts[day];
            for (const staffId in dayData) {
              const shiftData = dayData[staffId];
              
              // р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕зр╕гр╕Чр╕╡р╣Ир╕нр╣Йр╕▓р╕Зр╕нр╕┤р╕Зр╕Кр╕╖р╣Ир╕н (р╣Др╕бр╣Ир╣Гр╕Кр╣И ID)
              if (typeof shiftData === 'string' && 
                  shiftData.includes(' ') && 
                  !currentStaffIds.includes(staffId)) {
                
                // р╣Бр╕вр╕Бр╕Кр╕╖р╣Ир╕нр╣Бр╕ер╕░р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е
                const nameParts = shiftData.split(' ');
                if (nameParts.length >= 2) {
                  const firstName = nameParts[0];
                  const lastName = nameParts.slice(1).join(' ');
                  
                  // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡р╣Гр╕Щр╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
                  const existingIndex = deletedStaffData.findIndex(
                    staff => staff.firstName === firstName && staff.lastName === lastName
                  );
                  
                  if (existingIndex === -1) {
                    deletedStaffData.push({
                      firstName: firstName,
                      lastName: lastName,
                      scheduleReferences: [{
                        scheduleId: doc.id,
                        day: day,
                        staffId: staffId,
                        shiftData: shiftData
                      }]
                    });
                  } else {
                    deletedStaffData[existingIndex].scheduleReferences.push({
                      scheduleId: doc.id,
                      day: day,
                      staffId: staffId,
                      shiftData: shiftData
                    });
                  }
                }
              }
            }
          }
        }
      });
      
      console.log('ЁЯУЛ р╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Вр╕Фр╕Щр╕ер╕Ъ:', deletedStaffData);
      setDeletedStaffList(deletedStaffData);
      
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╣Бр╕Бр╕Щ:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╣Бр╕Бр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е');
    } finally {
      setRecoveryLoading(false);
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
  const recoverSelectedStaff = async (staffData) => {
    try {
      setRecoveryLoading(true);
      console.log('ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И...', staffData);
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╣Ир╕нр╕Щр╕зр╣Ир╕▓р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const staffSnapshot = await getDocs(collection(db, 'staff'));
      const existingStaff = staffSnapshot.docs.find(doc => {
        const data = doc.data();
        return data.firstName === staffData.firstName && data.lastName === staffData.lastName;
      });
      
      if (existingStaff) {
        alert(`тЬЕ ${staffData.firstName} ${staffData.lastName} р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕гр╕░р╕Ър╕Ър╣Бр╕ер╣Йр╕з!`);
        return;
      }
      
      // р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕лр╕бр╣И
      const newStaff = {
        firstName: staffData.firstName,
        lastName: staffData.lastName,
        position: 'р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е', // р╕лр╕гр╕╖р╕нр╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕Зр╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕б
        department: currentAdmin?.department || 'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕нр╕╕р╕Ър╕▒р╕Хр╕┤р╣Ар╕лр╕Хр╕╕',
        order: staffList.length + 1, // р╕ер╕│р╕Фр╕▒р╕Ър╕Чр╣Йр╕▓р╕вр╕кр╕╕р╕Ф
        canEditSchedule: true,
        canAssignTasks: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      
      // р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Бр╕ер╕▒р╕Ър╣Ар╕Вр╣Йр╕▓р╣Др╕Ы
      const staffRef = await addDoc(collection(db, 'staff'), newStaff);
      console.log('тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И ID:', staffRef.id);
      
      // р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч staffList р╣Гр╕Щ state
      const newStaffWithId = { id: staffRef.id, ...newStaff };
      setStaffList(prev => [...prev, newStaffWithId].sort((a, b) => (a.order || 0) - (b.order || 0)));
      
      // р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╣Ар╕Бр╣Ир╕▓
      await restoreScheduleDataForStaff(staffRef.id, staffData.scheduleReferences);
      
      // р╕ер╕Ър╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╣Вр╕Фр╕Щр╕ер╕Ъ
      setDeletedStaffList(prev => prev.filter(staff => 
        !(staff.firstName === staffData.firstName && staff.lastName === staffData.lastName)
      ));
      
      alert(`р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е${staffData.firstName} ${staffData.lastName} р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з`);
      
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Бр╕╣р╣Йр╕Др╕╖р╕Щ:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е');
    } finally {
      setRecoveryLoading(false);
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕гр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б
  const restoreScheduleDataForStaff = async (newStaffId, scheduleReferences) => {
    try {
      console.log('ЁЯУЕ р╕Бр╕│р╕ер╕▒р╕Зр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г...');
      
      for (const reference of scheduleReferences) {
        const scheduleDoc = await getDoc(doc(db, 'schedules', reference.scheduleId));
        if (scheduleDoc.exists()) {
          const scheduleData = scheduleDoc.data();
          
          if (scheduleData.shifts && scheduleData.shifts[reference.day]) {
            // р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕зр╕г
            scheduleData.shifts[reference.day][newStaffId] = reference.shiftData;
            
            // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Бр╕ер╣Йр╕з
            await setDoc(doc(db, 'schedules', reference.scheduleId), {
              ...scheduleData,
              updatedAt: new Date().toISOString(),
              restoredStaffId: newStaffId
            });
            
            console.log(`тЬЕ р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╣Ар╕зр╕гр╕зр╕▒р╕Щр╕Чр╕╡р╣И ${reference.day} р╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕в`);
          }
        }
      }
      
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г:', error);
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  const loadStaffLoginInfo = async () => {
    try {
      setLoginInfoLoading(true);
      console.log('ЁЯФР р╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И...');
      
      // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
      const staffSnapshot = await getDocs(collection(db, 'staff'));
      const staffData = staffSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      
      // р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й (users collection) - р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕гр╕┤р╕З
      const usersSnapshot = await getDocs(collection(db, 'users'));
      const usersData = usersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      
      console.log('ЁЯСе р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И:', staffData);
      console.log('ЁЯСд р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й:', usersData);
      
      // р╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Бр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
      const combinedInfo = staffData.map(staff => {
        // р╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
        let userInfo = null;
        
        // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 1: р╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕▓р╕Б firstName р╣Бр╕ер╕░ lastName р╣Гр╕Щ user data (р╕зр╕┤р╕Шр╕╡р╕лр╕ер╕▒р╕Б)
        userInfo = usersData.find(user => {
          return user.firstName === staff.firstName && user.lastName === staff.lastName;
        });
        
        // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 2: р╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕▓р╕Б username р╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е
        if (!userInfo) {
          userInfo = usersData.find(user => {
            const username = user.username?.toLowerCase() || '';
            const staffName = `${staff.firstName}${staff.lastName}`.toLowerCase().replace(/\s+/g, '');
            return username === staffName;
          });
        }
        
        // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 3: р╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕▓р╕Бр╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╕Др╕ер╣Йр╕▓р╕вр╕Бр╕▒р╕Щ (р╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓ "р╕ар╕▓р╕Ур╕╕р╕зр╕▒р╕Тр╕Щр╣М" vs "р╕Щр╕▓р╕вр╕ар╕▓р╕Ур╕╕р╕зр╕▒р╕Тр╕Щр╣М")
        if (!userInfo) {
          userInfo = usersData.find(user => {
            const userFirstName = user.firstName?.toLowerCase() || '';
            const userLastName = user.lastName?.toLowerCase() || '';
            const staffFirstName = staff.firstName?.toLowerCase() || '';
            const staffLastName = staff.lastName?.toLowerCase() || '';
            
            // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╕Др╕ер╣Йр╕▓р╕вр╕Бр╕▒р╕Щ (р╕Хр╕▒р╕Фр╕Др╕│р╕Щр╕│р╕лр╕Щр╣Йр╕▓р╕нр╕нр╕Б)
            const cleanUserFirstName = userFirstName.replace(/^(р╕Щр╕▓р╕в|р╕Щр╕▓р╕З|р╕Щр╕▓р╕Зр╕кр╕▓р╕з|р╕Фр╕г\.|р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М)/, '').trim();
            const cleanStaffFirstName = staffFirstName.replace(/^(р╕Щр╕▓р╕в|р╕Щр╕▓р╕З|р╕Щр╕▓р╕Зр╕кр╕▓р╕з|р╕Фр╕г\.|р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М)/, '').trim();
            
            return cleanUserFirstName === cleanStaffFirstName && userLastName === staffLastName;
          });
        }
        
        // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 4: р╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕▓р╕Б displayName р╕лр╕гр╕╖р╕нр╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕З
        if (!userInfo) {
          userInfo = usersData.find(user => {
            const displayName = user.displayName?.toLowerCase() || '';
            const staffName = `${staff.firstName} ${staff.lastName}`.toLowerCase();
            return displayName === staffName;
          });
        }
        
        // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 5: р╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕▓р╕Б email р╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е (р╕Бр╕гр╕Ур╕╡р╕Юр╕┤р╣Ар╕ир╕й)
        if (!userInfo) {
          userInfo = usersData.find(user => {
            const userEmail = user.email?.toLowerCase() || '';
            const staffName = `${staff.firstName} ${staff.lastName}`.toLowerCase();
            
            // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Хр╣Ир╕▓р╕Зр╣Ж р╕Вр╕нр╕З email
            return userEmail.includes(staff.firstName.toLowerCase()) && 
                   userEmail.includes(staff.lastName.toLowerCase());
          });
        }
        
        // р╕зр╕┤р╕Шр╕╡р╕Чр╕╡р╣И 6: р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╕╖р╣Ир╕нр╕гр╕╕р╣Ир╕Зр╕Ир╕┤р╕Щр╕Фр╕▓р╣Ар╕Ыр╣Зр╕Щр╕Юр╕┤р╣Ар╕ир╕й - р╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╣Др╕бр╣Ир╕бр╕╡р╕Ър╕▒р╕Нр╕Кр╕╡р╣Ар╕кр╕бр╕н
        if (staff.firstName === 'р╕гр╕╕р╣Йр╕Зр╕Ир╕┤р╕Щр╕Фр╕▓' && staff.lastName === 'р╕нр╕Бр╕нр╕╕р╣Ир╕Щ') {
          userInfo = null;
          console.log('ЁЯФТ р╕гр╕╕р╣Ир╕Зр╕Ир╕┤р╕Щр╕Фр╕▓ - р╕Ър╕▒р╕Зр╕Др╕▒р╕Ър╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╣Др╕бр╣Ир╕бр╕╡р╕Ър╕▒р╕Нр╕Кр╕╡');
        }
        
        // console.log(`ЁЯФН р╕Др╣Йр╕Щр╕лр╕▓р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И ${staff.firstName} ${staff.lastName}:`, userInfo);
        
        // р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е debug р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Ир╕▒р╕Ър╕Др╕╣р╣И
        if (!userInfo) {
          console.log(`тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ъ ${staff.firstName} ${staff.lastName}`);
          console.log('ЁЯФН р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Др╣Йр╕Щр╕лр╕▓:', {
            staffFirstName: staff.firstName,
            staffLastName: staff.lastName,
            totalUsers: usersData.length,
            userNames: usersData.map(u => `${u.firstName} ${u.lastName}`)
          });
        } else {
          console.log(`тЬЕ р╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ъ ${staff.firstName} ${staff.lastName}:`, {
            userId: userInfo.id,
            username: userInfo.username,
            hasPassword: !!userInfo.password
          });
        }
        

        
        return {
          ...staff,
          username: userInfo?.username || 'р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е',
          password: userInfo?.password || 'р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е',
          lastPasswordChange: userInfo?.lastPasswordChange || userInfo?.metadata?.lastSignInTime || 'р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е',
          userExists: !!userInfo,
          userId: userInfo?.id || null,
          uid: userInfo?.uid || null, // р╣Ар╕Юр╕┤р╣Ир╕б UID р╕Ир╕▓р╕Б Firebase Auth
          userData: userInfo // р╣Ар╕Бр╣Зр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Ар╕Юр╕╖р╣Ир╕н debug
        };
      });
      
      console.log('ЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И:', combinedInfo);
      setStaffLoginInfo(combinedInfo);
      
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ');
    } finally {
      setLoginInfoLoading(false);
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Ар╕Ыр╕┤р╕Фр╕лр╕Щр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
  const openLoginInfoModal = async () => {
    setShowLoginInfoModal(true);
    await loadStaffLoginInfo();
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕З username р╣Бр╕ер╕░ password р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕бр╕╡р╕Ър╕▒р╕Нр╕Кр╕╡
  const generateCredentials = (firstName, lastName) => {
    // р╕кр╕гр╣Йр╕▓р╕З username р╕Ир╕▓р╕Бр╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е
    const username = `${firstName.toLowerCase()}${lastName.toLowerCase()}`.replace(/\s+/g, '');
    
    // р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ (6 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г)
    const password = Math.random().toString(36).substring(2, 8);
    
    return { username, password };
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╣Гр╕лр╣Йр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
  const createAccountForStaff = async (staff) => {
    try {
      // р╣Ар╕Ыр╕┤р╕Фр╣Вр╕бр╕Фр╕▒р╕ер╣Гр╕лр╣Йр╣Бр╕нр╕Фр╕бр╕┤р╕Щр╕Хр╕▒р╣Йр╕З Username р╣Бр╕ер╕░ Password р╣Ар╕нр╕З
      setShowCreateAccountModal(true);
      setCreatingStaff(staff);
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡');
    }
  };

  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╕Ир╕гр╕┤р╕Зр╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╣Бр╕нр╕Фр╕бр╕┤р╕Щр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓р╣Бр╕ер╣Йр╕з
  const handleCreateAccount = async (username, password) => {
    try {
      if (!username || !password) {
        alert('р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Б Username р╣Бр╕ер╕░ Password');
        return;
      }

      if (username.length < 3) {
        alert('Username р╕Хр╣Йр╕нр╕Зр╕бр╕╡р╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 3 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г');
        return;
      }

      if (password.length < 6) {
        alert('Password р╕Хр╣Йр╕нр╕Зр╕бр╕╡р╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 6 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г');
        return;
      }

      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ Username р╕Лр╣Йр╕│р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
      const usersSnapshot = await getDocs(collection(db, 'users'));
      const existingUser = usersSnapshot.docs.find(doc => 
        doc.data().username === username
      );

      if (existingUser) {
        alert('Username р╕Щр╕╡р╣Йр╕бр╕╡р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Бр╕ер╣Йр╕з р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Б Username р╕нр╕╖р╣Ир╕Щ');
        return;
      }

      // р╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╣Гр╕Щ Firebase Authentication
      const email = `${username}@sa-hos.com`;
      
      try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;
        
        // р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Гр╕Щ Firestore
        const newUser = {
          username: username,
          firstName: creatingStaff.firstName,
          lastName: creatingStaff.lastName,
          department: creatingStaff.department || currentAdmin?.department || 'р╕лр╕нр╕Ьр╕╣р╣Йр╕Ыр╣Ир╕зр╕вр╕ир╕▒р╕ер╕вр╕Бр╕гр╕гр╕бр╕нр╕╕р╕Ър╕▒р╕Хр╕┤р╣Ар╕лр╕Хр╕╕',
          position: creatingStaff.position,
          role: 'staff',
          password: password, // р╣Ар╕Бр╣Зр╕Ър╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╣Др╕зр╣Йр╣Гр╕Щ Firestore
          createdAt: new Date().toISOString(),
          uid: user.uid // р╣Ар╕Бр╣Зр╕Ъ UID р╕Ир╕▓р╕Б Firebase Auth
        };
        
        // р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ users collection р╣Вр╕Фр╕вр╣Гр╕Кр╣Й UID р╣Ар╕Ыр╣Зр╕Щ document ID
        await setDoc(doc(db, 'users', user.uid), newUser);
        
        // р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕лр╣Йр╕бр╕╡ userId р╣Бр╕ер╕░ uid
        await updateDoc(doc(db, 'staff', creatingStaff.id), {
          userId: user.uid,
          uid: user.uid,
          updatedAt: new Date().toISOString()
        });
        
        alert(`тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╕кр╕│р╣Ар╕гр╣Зр╕И!\n\nUsername: ${username}\nр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ: ${password}\n\nтЪая╕П р╕Бр╕гр╕╕р╕Ур╕▓р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕╡р╣Йр╣Др╕зр╣Йр╣Бр╕ер╕░р╣Бр╕Ир╣Йр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И\n\nр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Др╕Фр╣Йр╕Фр╣Йр╕зр╕в:\nEmail: ${email}\nр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ: ${password}`);
        
        // р╕Ыр╕┤р╕Фр╣Вр╕бр╕Фр╕▒р╕ер╣Бр╕ер╕░р╕гр╕╡р╣Ар╕Лр╣Зр╕Х
        setShowCreateAccountModal(false);
        setCreatingStaff(null);
        
        // р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕Вр╣Йр╕нр╕бр╕╣р╕е
        await loadStaffLoginInfo();
        
      } catch (authError) {
        console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╣Гр╕Щ Firebase Auth:', authError);
        if (authError.code === 'auth/email-already-in-use') {
          alert('Username р╕Щр╕╡р╣Йр╕бр╕╡р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Бр╕ер╣Йр╕з р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Б Username р╕нр╕╖р╣Ир╕Щ');
        } else {
          alert(`р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡: ${authError.message}`);
        }
      }
      
    } catch (error) {
      console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡:', error);
      alert('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡');
    }
  };

  if (loading) {
    return (
      <div className="dashboard-content">
        <div className="loading-spinner">р╕Бр╕│р╕ер╕▒р╕Зр╣Вр╕лр╕ер╕Ф...</div>
      </div>
    );
  }

  return (
    <div className="dashboard-content">
      <h2>ЁЯСе р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</h2>
      <p>р╕гр╕░р╕Ър╕Ър╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</p>

      {/* р╕кр╕Цр╕┤р╕Хр╕┤ */}
      <div className="stats-container">
        <div className="stat-card">
          <div className="stat-number">{staffList.length}</div>
          <div className="stat-label">р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{getPositionCount('р╕Юр╕вр╕▓р╕Ър╕▓р╕е')}</div>
          <div className="stat-label">р╕Юр╕вр╕▓р╕Ър╕▓р╕е</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{getPositionCount('р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е')}</div>
          <div className="stat-label">р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Юр╕вр╕▓р╕Ър╕▓р╕е</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{getPositionCount('р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й')}</div>
          <div className="stat-label">р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕Щр╣Др╕Вр╣Й</div>
        </div>
        <div className="stat-card warning">
          <div className="stat-number">{staffList.filter(s => !s.department).length}</div>
          <div className="stat-label">р╣Др╕бр╣Ир╕бр╕╡р╣Бр╕Ьр╕Щр╕Б</div>
        </div>
      </div>

      {/* р╕Ыр╕╕р╣Ир╕бр╕Др╕зр╕Ър╕Др╕╕р╕б */}
      <div className="controls-container">
        <button
          onClick={() => setShowAddModal(true)}
          className="btn btn-primary add-btn"
          style={{ 
            width: '200px', 
            height: '40px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '8px'
          }}
        >
          тЮХ р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
        </button>
        <button
          onClick={openRecoveryModal}
          className="btn btn-warning"
          style={{ 
            width: '200px', 
            height: '40px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '8px'
          }}
        >
          ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕Бр╕╣р╣Йр╕Др╕╖р╕Щ
        </button>
        
        <button
          onClick={openLoginInfoModal}
          className="btn btn-secondary"
          title="р╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е Username р╣Бр╕ер╕░р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И"
          style={{ 
            width: '200px', 
            height: '40px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '8px'
          }}
        >
          ЁЯФР р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
        </button>
      </div>

      {/* р╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И */}
      <div className="table-container">
        <table className="staff-table">
                     <thead>
             <tr>
               <th>р╕ер╕│р╕Фр╕▒р╕Ъ</th>
               <th>р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е</th>
               <th>р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З</th>
               <th>р╣Бр╕Ьр╕Щр╕Б</th>
               <th>р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Бр╕▓р╕г</th>
             </tr>
           </thead>
          <tbody>
            {filteredStaff.map((staff, index) => (
              <tr key={staff.id}>
                <td>{index + 1}</td>
                <td className="staff-name">
                  {staff.firstName} {staff.lastName}
                </td>
                <td>
                  <span 
                    className="position-badge"
                    style={{ backgroundColor: positions.find(p => p.value === staff.position)?.color }}
                  >
                    {staff.position}
                  </span>
                </td>
                <td>
                  <span className="department-badge">
                    {staff.department || 'р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕'}
                  </span>
                </td>
                                                  <td className="permissions-actions">
                   <div className="all-icons">
                     {staff.canEditSchedule && (
                       <span className="permission-icon schedule" title="р╣Бр╕Бр╣Йр╣Др╕Вр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г">ЁЯУЕ</span>
                     )}
                     {staff.canAssignTasks && (
                       <span className="permission-icon tasks" title="р╕бр╕нр╕Ър╕лр╕бр╕▓р╕вр╕Зр╕▓р╕Щ">ЁЯУЛ</span>
                     )}
                     <span
                       onClick={() => openEditModal(staff)}
                       className="permission-icon edit"
                       title="р╣Бр╕Бр╣Йр╣Др╕В"
                     >
                       тЬПя╕П
                     </span>
                     <span
                       onClick={() => handleDeleteStaff(staff.id)}
                       className="permission-icon delete"
                       title="р╕ер╕Ъ"
                     >
                       ЁЯЧСя╕П
                     </span>
                   </div>
                 </td>
              </tr>
            ))}
          </tbody>
        </table>
        {filteredStaff.length === 0 && (
          <div className="no-data">
            <p>р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</p>
          </div>
        )}
      </div>

             {/* р╣Вр╕бр╕Фр╕▒р╕ер╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И */}
       {showAddModal && (
         <StaffModal
           title="р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕лр╕бр╣И"
           formData={formData}
           setFormData={setFormData}
           onSubmit={handleAddStaff}
           onClose={() => {
             setShowAddModal(false);
             resetForm();
           }}
           positions={positions}
           departments={departments}
           staffList={staffList}
           currentAdmin={currentAdmin}
         />
       )}

       {/* р╣Вр╕бр╕Фр╕▒р╕ер╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И */}
       {showEditModal && (
         <StaffModal
           title="р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И"
           formData={formData}
           setFormData={setFormData}
           onSubmit={handleEditStaff}
           onClose={() => {
             setShowEditModal(false);
             setEditingStaff(null);
             resetForm();
           }}
           positions={positions}
           departments={departments}
           staffList={staffList}
           currentAdmin={currentAdmin}
         />
       )}

       {/* р╣Вр╕бр╕Фр╕▒р╕ер╕лр╕Щр╣Йр╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ */}
       {showRecoveryModal && (
         <div className="modal">
           <div className="modal-content recovery-modal" style={{ maxWidth: '800px', width: '90%' }}>
             <button className="modal-close" onClick={() => setShowRecoveryModal(false)}>├Ч</button>
             
             <div className="modal-header">
               <h3 className="modal-title">ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕Бр╕╣р╣Йр╕Др╕╖р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е</h3>
             </div>

             <div className="modal-body">
               {recoveryLoading ? (
                 <div style={{ textAlign: 'center', padding: '20px' }}>
                   <div>ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Бр╕Бр╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е...</div>
                 </div>
               ) : deletedStaffList.length === 0 ? (
                 <div style={{ textAlign: 'center', padding: '20px', color: '#28a745' }}>
                   <div>тЬЕ р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕лр╕▓р╕вр╣Др╕Ы</div>
                   <div style={{ fontSize: '14px', marginTop: '10px' }}>
                     р╕гр╕░р╕Ър╕Ър╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕╣р╣Йр╕Др╕╖р╕Щ
                   </div>
                 </div>
               ) : (
                 <div>
                   <div style={{ marginBottom: '15px', color: '#856404', fontSize: '14px' }}>
                     р╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕╡р╣Ир╕лр╕▓р╕вр╣Др╕Ы {deletedStaffList.length} р╕Др╕Щ
                   </div>
                   
                   {deletedStaffList.map((staff, index) => (
                     <div key={index} style={{ 
                       border: '1px solid #dee2e6', 
                       borderRadius: '8px', 
                       padding: '15px', 
                       marginBottom: '10px',
                       background: '#f8f9fa'
                     }}>
                       <div style={{ 
                         display: 'flex', 
                         justifyContent: 'space-between', 
                         alignItems: 'center',
                         marginBottom: '10px'
                       }}>
                         <div>
                           <strong style={{ fontSize: '16px' }}>
                             {staff.firstName} {staff.lastName}
                           </strong>
                           <div style={{ fontSize: '14px', color: '#6c757d', marginTop: '5px' }}>
                             р╕Юр╕Ър╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г {staff.scheduleReferences.length} р╕Др╕гр╕▒р╣Йр╕З
                           </div>
                         </div>
                         <button 
                           onClick={() => recoverSelectedStaff(staff)}
                           className="btn btn-success"
                           style={{ fontSize: '12px', padding: '6px 12px' }}
                           disabled={recoveryLoading}
                         >
                           ЁЯФД р╕Бр╕╣р╣Йр╕Др╕╖р╕Щ
                         </button>
                       </div>
                       
                       <div style={{ fontSize: '12px', color: '#6c757d' }}>
                         <strong>р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Юр╕Ъ:</strong>
                         {staff.scheduleReferences.map((ref, refIndex) => (
                           <div key={refIndex} style={{ marginTop: '5px' }}>
                             тАв р╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г {ref.scheduleId} р╕зр╕▒р╕Щр╕Чр╕╡р╣И {ref.day}: {ref.shiftData}
                           </div>
                         ))}
                       </div>
                     </div>
                   ))}
                 </div>
               )}
             </div>

             <div className="modal-footer">
               <button 
                 onClick={() => setShowRecoveryModal(false)} 
                 className="btn btn-secondary"
               >
                 р╕Ыр╕┤р╕Ф
               </button>
             </div>
           </div>
         </div>
       )}

       {/* р╣Вр╕бр╕Фр╕▒р╕ер╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ */}
       {showLoginInfoModal && (
         <LoginInfoModal
           onClose={() => setShowLoginInfoModal(false)}
           staffLoginInfo={staffLoginInfo}
           loginInfoLoading={loginInfoLoading}
           onRefresh={loadStaffLoginInfo}
           currentPage={currentPage}
           setCurrentPage={setCurrentPage}
           searchLoginTerm={searchLoginTerm}
           setSearchLoginTerm={setSearchLoginTerm}
           itemsPerPage={itemsPerPage}
           generateCredentials={generateCredentials}
           createAccountForStaff={createAccountForStaff}
         />
       )}

       {/* р╣Вр╕бр╕Фр╕▒р╕ер╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡ */}
       {showCreateAccountModal && (
         <CreateAccountModal
           staff={creatingStaff}
           onClose={() => {
             setShowCreateAccountModal(false);
             setCreatingStaff(null);
           }}
           onSubmit={handleCreateAccount}
         />
       )}
    </div>
  );
}

// р╣Вр╕бр╕Фр╕▒р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Юр╕┤р╣Ир╕б/р╣Бр╕Бр╣Йр╣Др╕Вр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И
function StaffModal({ title, formData, setFormData, onSubmit, onClose, positions, departments, staffList, currentAdmin }) {
  return (
    <div className="modal">
      <div className="modal-content staff-modal">
        <button className="modal-close" onClick={onClose}>├Ч</button>
        
        <div className="modal-header">
          <h3 className="modal-title">{title}</h3>
        </div>

        <form onSubmit={onSubmit} className="staff-form">
          {/* р╣Бр╕Цр╕зр╕Чр╕╡р╣И 1: р╕Кр╕╖р╣Ир╕нр╣Бр╕ер╕░р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е */}
          <div className="form-row">
            <div className="form-group">
              <label className="form-label">р╕Кр╕╖р╣Ир╕н</label>
              <input
                type="text"
                className="form-input"
                value={formData.firstName}
                onChange={(e) => setFormData({...formData, firstName: e.target.value})}
                placeholder="р╕Кр╕╖р╣Ир╕н"
                required
              />
            </div>
            <div className="form-group">
              <label className="form-label">р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е</label>
              <input
                type="text"
                className="form-input"
                value={formData.lastName}
                onChange={(e) => setFormData({...formData, lastName: e.target.value})}
                placeholder="р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е"
                required
              />
            </div>
          </div>

          {/* р╣Бр╕Цр╕зр╕Чр╕╡р╣И 2: р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕Зр╣Бр╕ер╕░р╣Бр╕Ьр╕Щр╕Б */}
          <div className="form-row">
            <div className="form-group">
              <label className="form-label">р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З</label>
              <select
                className="form-input"
                value={formData.position}
                onChange={(e) => setFormData({...formData, position: e.target.value})}
                required
              >
                {positions.map(pos => (
                  <option key={pos.value} value={pos.value}>{pos.label}</option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label className="form-label">р╣Бр╕Ьр╕Щр╕Б</label>
              <select
                className="form-input"
                value={formData.department}
                onChange={(e) => setFormData({...formData, department: e.target.value})}
                required
              >
                <option value="">р╣Ар╕ер╕╖р╕нр╕Бр╣Бр╕Ьр╕Щр╕Б</option>
                {departments.map((dept, index) => (
                  <option key={index} value={dept}>{dept}</option>
                ))}
              </select>
            </div>
          </div>

          {/* р╣Бр╕Цр╕зр╕Чр╕╡р╣И 3: р╕ер╕│р╕Фр╕▒р╕Ър╣Бр╕ер╕░р╕кр╕┤р╕Чр╕Шр╕┤р╣М */}
          <div className="form-row">
            <div className="form-group">
              <label className="form-label">р╕ер╕│р╕Фр╕▒р╕Ъ</label>
              <select
                className="form-input"
                value={formData.order}
                onChange={(e) => setFormData({...formData, order: parseInt(e.target.value)})}
                required
              >
                {Array.from({ length: staffList.length + 1 }, (_, i) => (
                  <option key={i + 1} value={i + 1}>
                    {i + 1} {i === staffList.length ? '(р╕Чр╣Йр╕▓р╕вр╕кр╕╕р╕Ф)' : ''}
                  </option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label className="form-label">р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕г</label>
              <div className="checkbox-group">
                <label className="checkbox-item">
                  <input
                    type="checkbox"
                    checked={formData.canEditSchedule}
                    onChange={(e) => setFormData({...formData, canEditSchedule: e.target.checked})}
                  />
                  <span>р╣Бр╕Бр╣Йр╣Др╕Вр╕Хр╕▓р╕гр╕▓р╕Зр╣Ар╕зр╕г</span>
                </label>
                <label className="checkbox-item">
                  <input
                    type="checkbox"
                    checked={formData.canAssignTasks}
                    onChange={(e) => setFormData({...formData, canAssignTasks: e.target.checked})}
                  />
                  <span>р╕бр╕нр╕Ър╕лр╕бр╕▓р╕вр╕Зр╕▓р╕Щ</span>
                </label>
              </div>
            </div>
          </div>

          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn btn-secondary">
              р╕вр╕Бр╣Ар╕ер╕┤р╕Б
            </button>
            <button type="submit" className="btn btn-primary">
              р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// р╣Вр╕бр╕Фр╕▒р╕ер╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
function LoginInfoModal({ onClose, staffLoginInfo, loginInfoLoading, onRefresh, currentPage, setCurrentPage, searchLoginTerm, setSearchLoginTerm, itemsPerPage, generateCredentials, createAccountForStaff }) {
  // р╕Яр╕┤р╕ер╣Ар╕Хр╕нр╕гр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕бр╕Др╕│р╕Др╣Йр╕Щр╕лр╕▓
  const filteredData = staffLoginInfo.filter(staff => 
    `${staff.firstName} ${staff.lastName}`.toLowerCase().includes(searchLoginTerm.toLowerCase()) ||
    staff.position.toLowerCase().includes(searchLoginTerm.toLowerCase()) ||
    staff.username.toLowerCase().includes(searchLoginTerm.toLowerCase())
  );
  
  // р╕Др╕│р╕Щр╕зр╕Ур╕Ир╕│р╕Щр╕зр╕Щр╕лр╕Щр╣Йр╕▓
  const totalPages = Math.ceil(filteredData.length / itemsPerPage);
  const startIndex = currentPage * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentData = filteredData.slice(startIndex, endIndex);
  
  // р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕лр╕Щр╣Йр╕▓
  const goToPage = (page) => {
    const maxPage = Math.max(0, totalPages - 1);
    setCurrentPage(Math.max(0, Math.min(page, maxPage)));
  };
  
  // р╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕лр╕Щр╣Йр╕▓р╣Ар╕бр╕╖р╣Ир╕нр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щ
  React.useEffect(() => {
    if (currentPage >= totalPages && totalPages > 0) {
      setCurrentPage(totalPages - 1);
    }
  }, [totalPages, currentPage]);
  
  return (
    <div className="modal">
      <div className="modal-content login-info-modal" style={{ maxWidth: '1000px', width: '95%' }}>
        <button className="modal-close" onClick={onClose}>├Ч</button>
        
        <div className="modal-header">
          <h3 className="modal-title">ЁЯФР р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</h3>
          <div style={{ 
            fontSize: '12px', 
            color: '#6c757d', 
            marginTop: '5px',
            fontWeight: 'normal'
          }}>
            р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е Username р╣Бр╕ер╕░р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Вр╕нр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
          </div>

        </div>

        <div className="modal-body">
          {loginInfoLoading ? (
            <div style={{ textAlign: 'center', padding: '20px' }}>
              <div>ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ...</div>
            </div>
          ) : (
            <div>
              {/* р╕кр╣Ир╕зр╕Щр╕Др╣Йр╕Щр╕лр╕▓ */}
              <div style={{ 
                marginBottom: '15px',
                padding: '15px',
                background: '#f8f9fa',
                borderRadius: '8px',
                border: '1px solid #e9ecef'
              }}>
                <div style={{ display: 'flex', gap: '10px', alignItems: 'center', marginBottom: '10px' }}>
                  <input
                    type="text"
                    placeholder="р╕Др╣Йр╕Щр╕лр╕▓р╕Хр╕▓р╕бр╕Кр╕╖р╣Ир╕н, р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З, р╕лр╕гр╕╖р╕н username..."
                    value={searchLoginTerm}
                    onChange={(e) => {
                      setSearchLoginTerm(e.target.value);
                      setCurrentPage(0); // р╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕лр╕Щр╣Йр╕▓р╣Ар╕бр╕╖р╣Ир╕нр╕Др╣Йр╕Щр╕лр╕▓
                    }}
                    style={{
                      flex: 1,
                      padding: '8px 12px',
                      border: '2px solid #e1e8ed',
                      borderRadius: '6px',
                      fontSize: '14px'
                    }}
                  />
                  <button
                    onClick={() => {
                      setSearchLoginTerm('');
                      setCurrentPage(0);
                    }}
                    className="btn btn-secondary"
                    style={{ fontSize: '12px', padding: '6px 12px' }}
                  >
                    ЁЯЧСя╕П р╕ер╣Йр╕▓р╕З
                  </button>
                </div>
                <div style={{ color: '#856404', fontSize: '12px' }}>
                  р╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е {filteredData.length} р╕Др╕Щ р╕Ир╕▓р╕Бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф {staffLoginInfo.length} р╕Др╕Щ
                </div>

                <div style={{ 
                  display: 'flex', 
                  gap: '15px', 
                  marginTop: '10px',
                  fontSize: '12px'
                }}>
                  <div style={{ color: '#28a745' }}>
                    тЬЕ р╕бр╕╡р╕Ър╕▒р╕Нр╕Кр╕╡: {staffLoginInfo.filter(s => s.userExists).length} р╕Др╕Щ
                  </div>
                  <div style={{ color: '#856404' }}>
                    тЪая╕П р╣Др╕бр╣Ир╕бр╕╡р╕Ър╕▒р╕Нр╕Кр╕╡: {staffLoginInfo.filter(s => !s.userExists).length} р╕Др╕Щ
                  </div>
                </div>


              </div>
              
              {/* р╕Хр╕▓р╕гр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е */}
              <div style={{ overflowX: 'auto' }}>
                {currentData.length === 0 ? (
                  <div style={{ 
                    textAlign: 'center', 
                    padding: '40px', 
                    color: '#6c757d',
                    fontSize: '14px'
                  }}>
                    <div>ЁЯУн р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╕лр╕Щр╣Йр╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ</div>
                  </div>
                ) : (
                  <table style={{ 
                    width: '100%', 
                    borderCollapse: 'collapse',
                    fontSize: '12px'
                  }}>
                    <thead>
                      <tr style={{ background: '#f8f9fa' }}>
                        <th style={{ padding: '8px', border: '1px solid #dee2e6', textAlign: 'left' }}>р╕ер╕│р╕Фр╕▒р╕Ъ</th>
                        <th style={{ padding: '8px', border: '1px solid #dee2e6', textAlign: 'left' }}>р╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е</th>
                        <th style={{ padding: '8px', border: '1px solid #dee2e6', textAlign: 'left' }}>р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З</th>
                        <th style={{ padding: '8px', border: '1px solid #dee2e6', textAlign: 'left' }}>Username</th>
                        <th style={{ padding: '8px', border: '1px solid #dee2e6', textAlign: 'left' }}>р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ</th>
                        <th style={{ padding: '8px', border: '1px solid #dee2e6', textAlign: 'left' }}>Email</th>
                        <th style={{ padding: '8px', border: '1px solid #dee2e6', textAlign: 'left' }}>р╕кр╕Цр╕▓р╕Щр╕░</th>
                      </tr>
                    </thead>
                    <tbody>
                      {currentData.map((staff, index) => (
                      <tr key={staff.id} style={{ 
                        background: staff.userExists ? 'white' : '#fff3cd',
                        borderBottom: '1px solid #dee2e6'
                      }}>
                        <td style={{ padding: '8px', border: '1px solid #dee2e6' }}>{startIndex + index + 1}</td>
                        <td style={{ padding: '8px', border: '1px solid #dee2e6' }}>
                          <strong>{staff.firstName} {staff.lastName}</strong>
                        </td>
                        <td style={{ padding: '8px', border: '1px solid #dee2e6' }}>
                          <span style={{ 
                            padding: '2px 6px', 
                            borderRadius: '4px', 
                            fontSize: '10px',
                            background: staff.userExists ? '#d4edda' : '#fff3cd',
                            color: staff.userExists ? '#155724' : '#856404'
                          }}>
                            {staff.position}
                          </span>
                        </td>
                        <td style={{ padding: '8px', border: '1px solid #dee2e6', fontFamily: 'monospace' }}>
                          {staff.userExists ? (
                            <span style={{ color: '#28a745', fontWeight: 'bold' }}>
                              {staff.username}
                            </span>
                          ) : (
                            <span style={{ color: '#856404', fontStyle: 'italic' }}>
                              р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е
                            </span>
                          )}
                        </td>
                        <td style={{ padding: '8px', border: '1px solid #dee2e6', fontFamily: 'monospace' }}>
                          {staff.userExists ? (
                            <span style={{ color: '#28a745', fontWeight: 'bold' }}>
                              {staff.password || 'р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е'}
                            </span>
                          ) : (
                            <span style={{ color: '#856404', fontStyle: 'italic' }}>
                              р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е
                            </span>
                          )}
                        </td>
                        <td style={{ padding: '8px', border: '1px solid #dee2e6', fontFamily: 'monospace' }}>
                          {staff.userExists ? (
                            <span style={{ color: '#28a745', fontWeight: 'bold' }}>
                              {staff.username}@sa-hos.com
                            </span>
                          ) : (
                            <span style={{ color: '#856404', fontStyle: 'italic' }}>
                              р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е
                            </span>
                          )}
                        </td>
                        <td style={{ padding: '8px', border: '1px solid #dee2e6' }}>
                          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                            <span style={{ 
                              padding: '2px 6px', 
                              borderRadius: '4px', 
                              fontSize: '10px',
                              background: staff.userExists ? '#d4edda' : '#fff3cd',
                              color: staff.userExists ? '#155724' : '#856404'
                            }}>
                              {staff.userExists ? 'тЬЕ р╕бр╕╡р╕Ър╕▒р╕Нр╕Кр╕╡' : 'тЪая╕П р╣Др╕бр╣Ир╕бр╕╡р╕Ър╕▒р╕Нр╕Кр╕╡'}
                            </span>
                            {!staff.userExists && (
                              <button
                                onClick={() => createAccountForStaff(staff)}
                                className="btn btn-success"
                                style={{ fontSize: '12px', padding: '4px 8px' }}
                                title="р╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╣Гр╕лр╣Йр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕Щр╕Щр╕╡р╣Й"
                              >
                                тЮХ р╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡
                              </button>
                            )}
                            {staff.userData && (
                              <span 
                                style={{ 
                                  fontSize: '10px', 
                                  color: '#6c757d',
                                  cursor: 'pointer'
                                }}
                                title="р╕Др╕ер╕┤р╕Бр╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е debug"
                                onClick={() => console.log('User data for', staff.firstName, staff.lastName, ':', staff.userData)}
                              >
                                ЁЯФН
                              </span>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                )}
              </div>
              
              {/* р╕гр╕░р╕Ър╕Ър╣Ар╕ер╕╖р╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓ */}
              {totalPages > 1 && (
                <div style={{ 
                  marginTop: '15px', 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center',
                  gap: '10px'
                }}>
                  <button
                    onClick={() => goToPage(0)}
                    disabled={currentPage === 0}
                    className="btn btn-secondary"
                    style={{ fontSize: '12px', padding: '6px 12px' }}
                  >
                    тПоя╕П р╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б
                  </button>
                  <button
                    onClick={() => goToPage(currentPage - 1)}
                    disabled={currentPage === 0}
                    className="btn btn-secondary"
                    style={{ fontSize: '12px', padding: '6px 12px' }}
                  >
                    тмЕя╕П р╕Бр╣Ир╕нр╕Щр╕лр╕Щр╣Йр╕▓
                  </button>
                  
                  <span style={{ fontSize: '14px', fontWeight: 'bold' }}>
                    р╕лр╕Щр╣Йр╕▓ {currentPage + 1} р╕Ир╕▓р╕Б {totalPages}
                  </span>
                  
                  <button
                    onClick={() => goToPage(currentPage + 1)}
                    disabled={currentPage === totalPages - 1}
                    className="btn btn-secondary"
                    style={{ fontSize: '12px', padding: '6px 12px' }}
                  >
                    р╕Цр╕▒р╕Фр╣Др╕Ы тЮбя╕П
                  </button>
                  <button
                    onClick={() => goToPage(totalPages - 1)}
                    disabled={currentPage === totalPages - 1}
                    className="btn btn-secondary"
                    style={{ fontSize: '12px', padding: '6px 12px' }}
                  >
                    р╕лр╕Щр╣Йр╕▓р╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в тПня╕П
                  </button>
                </div>
              )}
              
              
            </div>
          )}
        </div>

        <div className="modal-footer">

          <div style={{ display: 'flex', gap: '10px' }}>
            <button 
              onClick={onClose} 
              className="btn btn-secondary"
            >
              р╕Ыр╕┤р╕Ф
            </button>
            <button 
              onClick={onRefresh} 
              className="btn btn-primary"
              disabled={loginInfoLoading}
            >
              ЁЯФД р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕Вр╣Йр╕нр╕бр╕╣р╕е
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// р╣Вр╕бр╕Фр╕▒р╕ер╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡
function CreateAccountModal({ staff, onClose, onSubmit }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // р╕кр╕гр╣Йр╕▓р╕З username р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Ир╕▓р╕Бр╕Кр╕╖р╣Ир╕н-р╕Щр╕▓р╕бр╕кр╕Бр╕╕р╕е
  useEffect(() => {
    if (staff) {
      const defaultUsername = `${staff.firstName.toLowerCase()}${staff.lastName.toLowerCase()}`.replace(/\s+/g, '');
      setUsername(defaultUsername);
    }
  }, [staff]);

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (password !== confirmPassword) {
      alert('р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Др╕бр╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Щ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З');
      return;
    }
    
    onSubmit(username, password);
  };

  if (!staff) return null;

  return (
    <div className="modal">
      <div className="modal-content create-account-modal">
        <button className="modal-close" onClick={onClose}>├Ч</button>
        
        <div className="modal-header">
          <h3 className="modal-title">тЮХ р╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╣Гр╕лр╣Йр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И</h3>
          <div style={{ 
            fontSize: '12px', 
            color: '#28a745', 
            marginTop: '5px',
            fontWeight: 'normal'
          }}>
            р╕Ър╕▒р╕Нр╕Кр╕╡р╕Ир╕░р╕Цр╕╣р╕Бр╕кр╕гр╣Йр╕▓р╕Зр╣Гр╕Щ Firebase Authentication р╣Бр╕ер╕░р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╣Др╕Фр╣Йр╕Чр╕▒р╕Щр╕Чр╕╡
          </div>
        </div>

        <form onSubmit={handleSubmit} className="create-account-form">
          <div className="form-group">
            <label className="form-label">Username *</label>
            <input
              type="text"
              className="form-input"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              placeholder="р╕Бр╕гр╕нр╕Б Username"
              required
              minLength={3}
              maxLength={20}
            />
            <div className="form-help-text">
              Username р╕Хр╣Йр╕нр╕Зр╕бр╕╡р╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 3 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г р╣Бр╕ер╕░р╣Др╕бр╣Ир╕Лр╣Йр╕│р╕Бр╕▒р╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕нр╕╖р╣Ир╕Щ
            </div>
          </div>

          <div className="form-group">
            <label className="form-label">р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ *</label>
            <div style={{ position: 'relative' }}>
              <input
                type={showPassword ? 'text' : 'password'}
                className="form-input"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="р╕Бр╕гр╕нр╕Бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ"
                required
                minLength={6}
                maxLength={20}
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                style={{
                  position: 'absolute',
                  right: '10px',
                  top: '50%',
                  transform: 'translateY(-50%)',
                  background: 'none',
                  border: 'none',
                  cursor: 'pointer',
                  fontSize: '16px',
                  color: '#6c757d'
                }}
              >
                {showPassword ? 'ЁЯЩИ' : 'ЁЯСБя╕П'}
              </button>
            </div>
            <div className="form-help-text">
              р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Хр╣Йр╕нр╕Зр╕бр╕╡р╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 6 р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г
            </div>
          </div>

          <div className="form-group">
            <label className="form-label">р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ *</label>
            <div style={{ position: 'relative' }}>
              <input
                type={showConfirmPassword ? 'text' : 'password'}
                className="form-input"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="р╕Бр╕гр╕нр╕Бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З"
                required
                minLength={6}
                maxLength={20}
              />
              <button
                type="button"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                style={{
                  position: 'absolute',
                  right: '10px',
                  top: '50%',
                  transform: 'translateY(-50%)',
                  background: 'none',
                  border: 'none',
                  cursor: 'pointer',
                  fontSize: '16px',
                  color: '#6c757d'
                }}
              >
                {showConfirmPassword ? 'ЁЯЩИ' : 'ЁЯСБя╕П'}
              </button>
            </div>
            <div className="form-help-text">
              р╕Бр╕гр╕нр╕Бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Юр╕╖р╣Ир╕нр╕вр╕╖р╕Щр╕вр╕▒р╕Щ
            </div>
          </div>

          <div className="modal-actions">
            <button type="button" onClick={onClose} className="btn btn-secondary">
              р╕вр╕Бр╣Ар╕ер╕┤р╕Б
            </button>
            <button type="submit" className="btn btn-primary">
              тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╕Ър╕▒р╕Нр╕Кр╕╡
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default StaffManagement;
